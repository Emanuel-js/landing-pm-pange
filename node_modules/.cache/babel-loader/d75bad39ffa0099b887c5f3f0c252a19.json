{"ast":null,"code":"import { px } from 'style-value-types'; // Convert a progress 0-1 to a pixels value based on the provided length\n\nvar progressToPixels = function (progress, length) {\n  return px.transform(progress * length);\n};\n\nvar dashKeys = {\n  offset: \"stroke-dashoffset\",\n  array: \"stroke-dasharray\"\n};\nvar camelKeys = {\n  offset: \"strokeDashoffset\",\n  array: \"strokeDasharray\"\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\n\nfunction buildSVGPath(attrs, totalLength, length, spacing, offset, useDashCase) {\n  if (spacing === void 0) {\n    spacing = 1;\n  }\n\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  if (useDashCase === void 0) {\n    useDashCase = true;\n  } // We use dash case when setting attributes directly to the DOM node and camel case\n  // when defining props on a React component.\n\n\n  var keys = useDashCase ? dashKeys : camelKeys; // Build the dash offset\n\n  attrs[keys.offset] = progressToPixels(-offset, totalLength); // Build the dash array\n\n  var pathLength = progressToPixels(length, totalLength);\n  var pathSpacing = progressToPixels(spacing, totalLength);\n  attrs[keys.array] = pathLength + \" \" + pathSpacing;\n}\n\nexport { buildSVGPath };","map":{"version":3,"names":["px","progressToPixels","progress","length","transform","dashKeys","offset","array","camelKeys","buildSVGPath","attrs","totalLength","spacing","useDashCase","keys","pathLength","pathSpacing"],"sources":["C:/Users/User/Desktop/ArifPAy/other file/me/node_modules/framer-motion/dist/es/render/svg/utils/path.js"],"sourcesContent":["import { px } from 'style-value-types';\n\n// Convert a progress 0-1 to a pixels value based on the provided length\nvar progressToPixels = function (progress, length) {\n    return px.transform(progress * length);\n};\nvar dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nvar camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, totalLength, length, spacing, offset, useDashCase) {\n    if (spacing === void 0) { spacing = 1; }\n    if (offset === void 0) { offset = 0; }\n    if (useDashCase === void 0) { useDashCase = true; }\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    var keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = progressToPixels(-offset, totalLength);\n    // Build the dash array\n    var pathLength = progressToPixels(length, totalLength);\n    var pathSpacing = progressToPixels(spacing, totalLength);\n    attrs[keys.array] = pathLength + \" \" + pathSpacing;\n}\n\nexport { buildSVGPath };\n"],"mappings":"AAAA,SAASA,EAAT,QAAmB,mBAAnB,C,CAEA;;AACA,IAAIC,gBAAgB,GAAG,UAAUC,QAAV,EAAoBC,MAApB,EAA4B;EAC/C,OAAOH,EAAE,CAACI,SAAH,CAAaF,QAAQ,GAAGC,MAAxB,CAAP;AACH,CAFD;;AAGA,IAAIE,QAAQ,GAAG;EACXC,MAAM,EAAE,mBADG;EAEXC,KAAK,EAAE;AAFI,CAAf;AAIA,IAAIC,SAAS,GAAG;EACZF,MAAM,EAAE,kBADI;EAEZC,KAAK,EAAE;AAFK,CAAhB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,YAAT,CAAsBC,KAAtB,EAA6BC,WAA7B,EAA0CR,MAA1C,EAAkDS,OAAlD,EAA2DN,MAA3D,EAAmEO,WAAnE,EAAgF;EAC5E,IAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,CAAV;EAAc;;EACxC,IAAIN,MAAM,KAAK,KAAK,CAApB,EAAuB;IAAEA,MAAM,GAAG,CAAT;EAAa;;EACtC,IAAIO,WAAW,KAAK,KAAK,CAAzB,EAA4B;IAAEA,WAAW,GAAG,IAAd;EAAqB,CAHyB,CAI5E;EACA;;;EACA,IAAIC,IAAI,GAAGD,WAAW,GAAGR,QAAH,GAAcG,SAApC,CAN4E,CAO5E;;EACAE,KAAK,CAACI,IAAI,CAACR,MAAN,CAAL,GAAqBL,gBAAgB,CAAC,CAACK,MAAF,EAAUK,WAAV,CAArC,CAR4E,CAS5E;;EACA,IAAII,UAAU,GAAGd,gBAAgB,CAACE,MAAD,EAASQ,WAAT,CAAjC;EACA,IAAIK,WAAW,GAAGf,gBAAgB,CAACW,OAAD,EAAUD,WAAV,CAAlC;EACAD,KAAK,CAACI,IAAI,CAACP,KAAN,CAAL,GAAoBQ,UAAU,GAAG,GAAb,GAAmBC,WAAvC;AACH;;AAED,SAASP,YAAT"},"metadata":{},"sourceType":"module"}