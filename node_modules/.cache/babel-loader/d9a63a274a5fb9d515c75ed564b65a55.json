{"ast":null,"code":"import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.js';\n\nvar isFloat = function (value) {\n  return !isNaN(parseFloat(value));\n};\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\n\n\nvar MotionValue =\n/** @class */\nfunction () {\n  /**\r\n   * @param init - The initiating value\r\n   * @param config - Optional configuration options\r\n   *\r\n   * -  `transformer`: A function to transform incoming values with.\r\n   *\r\n   * @internal\r\n   */\n  function MotionValue(init) {\n    var _this = this;\n    /**\r\n     * Duration, in milliseconds, since last updating frame.\r\n     *\r\n     * @internal\r\n     */\n\n\n    this.timeDelta = 0;\n    /**\r\n     * Timestamp of the last time this `MotionValue` was updated.\r\n     *\r\n     * @internal\r\n     */\n\n    this.lastUpdated = 0;\n    /**\r\n     * Functions to notify when the `MotionValue` updates.\r\n     *\r\n     * @internal\r\n     */\n\n    this.updateSubscribers = new SubscriptionManager();\n    /**\r\n     * Functions to notify when the velocity updates.\r\n     *\r\n     * @internal\r\n     */\n\n    this.velocityUpdateSubscribers = new SubscriptionManager();\n    /**\r\n     * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\r\n     *\r\n     * @internal\r\n     */\n\n    this.renderSubscribers = new SubscriptionManager();\n    /**\r\n     * Tracks whether this value can output a velocity. Currently this is only true\r\n     * if the value is numerical, but we might be able to widen the scope here and support\r\n     * other value types.\r\n     *\r\n     * @internal\r\n     */\n\n    this.canTrackVelocity = false;\n\n    this.updateAndNotify = function (v, render) {\n      if (render === void 0) {\n        render = true;\n      }\n\n      _this.prev = _this.current;\n      _this.current = v; // Update timestamp\n\n      var _a = getFrameData(),\n          delta = _a.delta,\n          timestamp = _a.timestamp;\n\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      } // Update update subscribers\n\n\n      if (_this.prev !== _this.current) {\n        _this.updateSubscribers.notify(_this.current);\n      } // Update velocity subscribers\n\n\n      if (_this.velocityUpdateSubscribers.getSize()) {\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      } // Update render subscribers\n\n\n      if (render) {\n        _this.renderSubscribers.notify(_this.current);\n      }\n    };\n    /**\r\n     * Schedule a velocity check for the next frame.\r\n     *\r\n     * This is an instanced and bound function to prevent generating a new\r\n     * function once per frame.\r\n     *\r\n     * @internal\r\n     */\n\n\n    this.scheduleVelocityCheck = function () {\n      return sync.postRender(_this.velocityCheck);\n    };\n    /**\r\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\r\n     * This ensures velocity calculations return `0`.\r\n     *\r\n     * This is an instanced and bound function to prevent generating a new\r\n     * function once per frame.\r\n     *\r\n     * @internal\r\n     */\n\n\n    this.velocityCheck = function (_a) {\n      var timestamp = _a.timestamp;\n\n      if (timestamp !== _this.lastUpdated) {\n        _this.prev = _this.current;\n\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      }\n    };\n\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n  }\n  /**\r\n   * Adds a function that will be notified when the `MotionValue` is updated.\r\n   *\r\n   * It returns a function that, when called, will cancel the subscription.\r\n   *\r\n   * When calling `onChange` inside a React component, it should be wrapped with the\r\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n   *\r\n   * @library\r\n   *\r\n   * ```jsx\r\n   * function MyComponent() {\r\n   *   const x = useMotionValue(0)\r\n   *   const y = useMotionValue(0)\r\n   *   const opacity = useMotionValue(1)\r\n   *\r\n   *   useEffect(() => {\r\n   *     function updateOpacity() {\r\n   *       const maxXY = Math.max(x.get(), y.get())\r\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n   *       opacity.set(newOpacity)\r\n   *     }\r\n   *\r\n   *     const unsubscribeX = x.onChange(updateOpacity)\r\n   *     const unsubscribeY = y.onChange(updateOpacity)\r\n   *\r\n   *     return () => {\r\n   *       unsubscribeX()\r\n   *       unsubscribeY()\r\n   *     }\r\n   *   }, [])\r\n   *\r\n   *   return <Frame x={x} />\r\n   * }\r\n   * ```\r\n   *\r\n   * @motion\r\n   *\r\n   * ```jsx\r\n   * export const MyComponent = () => {\r\n   *   const x = useMotionValue(0)\r\n   *   const y = useMotionValue(0)\r\n   *   const opacity = useMotionValue(1)\r\n   *\r\n   *   useEffect(() => {\r\n   *     function updateOpacity() {\r\n   *       const maxXY = Math.max(x.get(), y.get())\r\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n   *       opacity.set(newOpacity)\r\n   *     }\r\n   *\r\n   *     const unsubscribeX = x.onChange(updateOpacity)\r\n   *     const unsubscribeY = y.onChange(updateOpacity)\r\n   *\r\n   *     return () => {\r\n   *       unsubscribeX()\r\n   *       unsubscribeY()\r\n   *     }\r\n   *   }, [])\r\n   *\r\n   *   return <motion.div style={{ x }} />\r\n   * }\r\n   * ```\r\n   *\r\n   * @internalremarks\r\n   *\r\n   * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\r\n   *\r\n   * ```jsx\r\n   * useOnChange(x, () => {})\r\n   * ```\r\n   *\r\n   * @param subscriber - A function that receives the latest value.\r\n   * @returns A function that, when called, will cancel this subscription.\r\n   *\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.onChange = function (subscription) {\n    return this.updateSubscribers.add(subscription);\n  };\n\n  MotionValue.prototype.clearListeners = function () {\n    this.updateSubscribers.clear();\n  };\n  /**\r\n   * Adds a function that will be notified when the `MotionValue` requests a render.\r\n   *\r\n   * @param subscriber - A function that's provided the latest value.\r\n   * @returns A function that, when called, will cancel this subscription.\r\n   *\r\n   * @internal\r\n   */\n\n\n  MotionValue.prototype.onRenderRequest = function (subscription) {\n    // Render immediately\n    subscription(this.get());\n    return this.renderSubscribers.add(subscription);\n  };\n  /**\r\n   * Attaches a passive effect to the `MotionValue`.\r\n   *\r\n   * @internal\r\n   */\n\n\n  MotionValue.prototype.attach = function (passiveEffect) {\n    this.passiveEffect = passiveEffect;\n  };\n  /**\r\n   * Sets the state of the `MotionValue`.\r\n   *\r\n   * @remarks\r\n   *\r\n   * ```jsx\r\n   * const x = useMotionValue(0)\r\n   * x.set(10)\r\n   * ```\r\n   *\r\n   * @param latest - Latest value to set.\r\n   * @param render - Whether to notify render subscribers. Defaults to `true`\r\n   *\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.set = function (v, render) {\n    if (render === void 0) {\n      render = true;\n    }\n\n    if (!render || !this.passiveEffect) {\n      this.updateAndNotify(v, render);\n    } else {\n      this.passiveEffect(v, this.updateAndNotify);\n    }\n  };\n  /**\r\n   * Returns the latest state of `MotionValue`\r\n   *\r\n   * @returns - The latest state of `MotionValue`\r\n   *\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.get = function () {\n    return this.current;\n  };\n  /**\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.getPrevious = function () {\n    return this.prev;\n  };\n  /**\r\n   * Returns the latest velocity of `MotionValue`\r\n   *\r\n   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n   *\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.getVelocity = function () {\n    // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n    return this.canTrackVelocity ? // These casts could be avoided if parseFloat would be typed better\n    velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n  };\n  /**\r\n   * Registers a new animation to control this `MotionValue`. Only one\r\n   * animation can drive a `MotionValue` at one time.\r\n   *\r\n   * ```jsx\r\n   * value.start()\r\n   * ```\r\n   *\r\n   * @param animation - A function that starts the provided animation\r\n   *\r\n   * @internal\r\n   */\n\n\n  MotionValue.prototype.start = function (animation) {\n    var _this = this;\n\n    this.stop();\n    return new Promise(function (resolve) {\n      _this.hasAnimated = true;\n      _this.stopAnimation = animation(resolve);\n    }).then(function () {\n      return _this.clearAnimation();\n    });\n  };\n  /**\r\n   * Stop the currently active animation.\r\n   *\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.stop = function () {\n    if (this.stopAnimation) this.stopAnimation();\n    this.clearAnimation();\n  };\n  /**\r\n   * Returns `true` if this value is currently animating.\r\n   *\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.isAnimating = function () {\n    return !!this.stopAnimation;\n  };\n\n  MotionValue.prototype.clearAnimation = function () {\n    this.stopAnimation = null;\n  };\n  /**\r\n   * Destroy and clean up subscribers to this `MotionValue`.\r\n   *\r\n   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n   * created a `MotionValue` via the `motionValue` function.\r\n   *\r\n   * @public\r\n   */\n\n\n  MotionValue.prototype.destroy = function () {\n    this.updateSubscribers.clear();\n    this.renderSubscribers.clear();\n    this.stop();\n  };\n\n  return MotionValue;\n}();\n/**\r\n * @internal\r\n */\n\n\nfunction motionValue(init) {\n  return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };","map":{"version":3,"names":["sync","getFrameData","velocityPerSecond","SubscriptionManager","isFloat","value","isNaN","parseFloat","MotionValue","init","_this","timeDelta","lastUpdated","updateSubscribers","velocityUpdateSubscribers","renderSubscribers","canTrackVelocity","updateAndNotify","v","render","prev","current","_a","delta","timestamp","postRender","scheduleVelocityCheck","notify","getSize","getVelocity","velocityCheck","hasAnimated","prototype","onChange","subscription","add","clearListeners","clear","onRenderRequest","get","attach","passiveEffect","set","getPrevious","start","animation","stop","Promise","resolve","stopAnimation","then","clearAnimation","isAnimating","destroy","motionValue"],"sources":["E:/Projects/project/project mangement dashbord/landing-pm-pange/node_modules/framer-motion/dist/es/value/index.js"],"sourcesContent":["import sync, { getFrameData } from 'framesync';\r\nimport { velocityPerSecond } from 'popmotion';\r\nimport { SubscriptionManager } from '../utils/subscription-manager.js';\r\n\r\nvar isFloat = function (value) {\r\n    return !isNaN(parseFloat(value));\r\n};\r\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\r\nvar MotionValue = /** @class */ (function () {\r\n    /**\r\n     * @param init - The initiating value\r\n     * @param config - Optional configuration options\r\n     *\r\n     * -  `transformer`: A function to transform incoming values with.\r\n     *\r\n     * @internal\r\n     */\r\n    function MotionValue(init) {\r\n        var _this = this;\r\n        /**\r\n         * Duration, in milliseconds, since last updating frame.\r\n         *\r\n         * @internal\r\n         */\r\n        this.timeDelta = 0;\r\n        /**\r\n         * Timestamp of the last time this `MotionValue` was updated.\r\n         *\r\n         * @internal\r\n         */\r\n        this.lastUpdated = 0;\r\n        /**\r\n         * Functions to notify when the `MotionValue` updates.\r\n         *\r\n         * @internal\r\n         */\r\n        this.updateSubscribers = new SubscriptionManager();\r\n        /**\r\n         * Functions to notify when the velocity updates.\r\n         *\r\n         * @internal\r\n         */\r\n        this.velocityUpdateSubscribers = new SubscriptionManager();\r\n        /**\r\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\r\n         *\r\n         * @internal\r\n         */\r\n        this.renderSubscribers = new SubscriptionManager();\r\n        /**\r\n         * Tracks whether this value can output a velocity. Currently this is only true\r\n         * if the value is numerical, but we might be able to widen the scope here and support\r\n         * other value types.\r\n         *\r\n         * @internal\r\n         */\r\n        this.canTrackVelocity = false;\r\n        this.updateAndNotify = function (v, render) {\r\n            if (render === void 0) { render = true; }\r\n            _this.prev = _this.current;\r\n            _this.current = v;\r\n            // Update timestamp\r\n            var _a = getFrameData(), delta = _a.delta, timestamp = _a.timestamp;\r\n            if (_this.lastUpdated !== timestamp) {\r\n                _this.timeDelta = delta;\r\n                _this.lastUpdated = timestamp;\r\n                sync.postRender(_this.scheduleVelocityCheck);\r\n            }\r\n            // Update update subscribers\r\n            if (_this.prev !== _this.current) {\r\n                _this.updateSubscribers.notify(_this.current);\r\n            }\r\n            // Update velocity subscribers\r\n            if (_this.velocityUpdateSubscribers.getSize()) {\r\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\r\n            }\r\n            // Update render subscribers\r\n            if (render) {\r\n                _this.renderSubscribers.notify(_this.current);\r\n            }\r\n        };\r\n        /**\r\n         * Schedule a velocity check for the next frame.\r\n         *\r\n         * This is an instanced and bound function to prevent generating a new\r\n         * function once per frame.\r\n         *\r\n         * @internal\r\n         */\r\n        this.scheduleVelocityCheck = function () { return sync.postRender(_this.velocityCheck); };\r\n        /**\r\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\r\n         * This ensures velocity calculations return `0`.\r\n         *\r\n         * This is an instanced and bound function to prevent generating a new\r\n         * function once per frame.\r\n         *\r\n         * @internal\r\n         */\r\n        this.velocityCheck = function (_a) {\r\n            var timestamp = _a.timestamp;\r\n            if (timestamp !== _this.lastUpdated) {\r\n                _this.prev = _this.current;\r\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\r\n            }\r\n        };\r\n        this.hasAnimated = false;\r\n        this.prev = this.current = init;\r\n        this.canTrackVelocity = isFloat(this.current);\r\n    }\r\n    /**\r\n     * Adds a function that will be notified when the `MotionValue` is updated.\r\n     *\r\n     * It returns a function that, when called, will cancel the subscription.\r\n     *\r\n     * When calling `onChange` inside a React component, it should be wrapped with the\r\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n     *\r\n     * @library\r\n     *\r\n     * ```jsx\r\n     * function MyComponent() {\r\n     *   const x = useMotionValue(0)\r\n     *   const y = useMotionValue(0)\r\n     *   const opacity = useMotionValue(1)\r\n     *\r\n     *   useEffect(() => {\r\n     *     function updateOpacity() {\r\n     *       const maxXY = Math.max(x.get(), y.get())\r\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n     *       opacity.set(newOpacity)\r\n     *     }\r\n     *\r\n     *     const unsubscribeX = x.onChange(updateOpacity)\r\n     *     const unsubscribeY = y.onChange(updateOpacity)\r\n     *\r\n     *     return () => {\r\n     *       unsubscribeX()\r\n     *       unsubscribeY()\r\n     *     }\r\n     *   }, [])\r\n     *\r\n     *   return <Frame x={x} />\r\n     * }\r\n     * ```\r\n     *\r\n     * @motion\r\n     *\r\n     * ```jsx\r\n     * export const MyComponent = () => {\r\n     *   const x = useMotionValue(0)\r\n     *   const y = useMotionValue(0)\r\n     *   const opacity = useMotionValue(1)\r\n     *\r\n     *   useEffect(() => {\r\n     *     function updateOpacity() {\r\n     *       const maxXY = Math.max(x.get(), y.get())\r\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n     *       opacity.set(newOpacity)\r\n     *     }\r\n     *\r\n     *     const unsubscribeX = x.onChange(updateOpacity)\r\n     *     const unsubscribeY = y.onChange(updateOpacity)\r\n     *\r\n     *     return () => {\r\n     *       unsubscribeX()\r\n     *       unsubscribeY()\r\n     *     }\r\n     *   }, [])\r\n     *\r\n     *   return <motion.div style={{ x }} />\r\n     * }\r\n     * ```\r\n     *\r\n     * @internalremarks\r\n     *\r\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\r\n     *\r\n     * ```jsx\r\n     * useOnChange(x, () => {})\r\n     * ```\r\n     *\r\n     * @param subscriber - A function that receives the latest value.\r\n     * @returns A function that, when called, will cancel this subscription.\r\n     *\r\n     * @public\r\n     */\r\n    MotionValue.prototype.onChange = function (subscription) {\r\n        return this.updateSubscribers.add(subscription);\r\n    };\r\n    MotionValue.prototype.clearListeners = function () {\r\n        this.updateSubscribers.clear();\r\n    };\r\n    /**\r\n     * Adds a function that will be notified when the `MotionValue` requests a render.\r\n     *\r\n     * @param subscriber - A function that's provided the latest value.\r\n     * @returns A function that, when called, will cancel this subscription.\r\n     *\r\n     * @internal\r\n     */\r\n    MotionValue.prototype.onRenderRequest = function (subscription) {\r\n        // Render immediately\r\n        subscription(this.get());\r\n        return this.renderSubscribers.add(subscription);\r\n    };\r\n    /**\r\n     * Attaches a passive effect to the `MotionValue`.\r\n     *\r\n     * @internal\r\n     */\r\n    MotionValue.prototype.attach = function (passiveEffect) {\r\n        this.passiveEffect = passiveEffect;\r\n    };\r\n    /**\r\n     * Sets the state of the `MotionValue`.\r\n     *\r\n     * @remarks\r\n     *\r\n     * ```jsx\r\n     * const x = useMotionValue(0)\r\n     * x.set(10)\r\n     * ```\r\n     *\r\n     * @param latest - Latest value to set.\r\n     * @param render - Whether to notify render subscribers. Defaults to `true`\r\n     *\r\n     * @public\r\n     */\r\n    MotionValue.prototype.set = function (v, render) {\r\n        if (render === void 0) { render = true; }\r\n        if (!render || !this.passiveEffect) {\r\n            this.updateAndNotify(v, render);\r\n        }\r\n        else {\r\n            this.passiveEffect(v, this.updateAndNotify);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the latest state of `MotionValue`\r\n     *\r\n     * @returns - The latest state of `MotionValue`\r\n     *\r\n     * @public\r\n     */\r\n    MotionValue.prototype.get = function () {\r\n        return this.current;\r\n    };\r\n    /**\r\n     * @public\r\n     */\r\n    MotionValue.prototype.getPrevious = function () {\r\n        return this.prev;\r\n    };\r\n    /**\r\n     * Returns the latest velocity of `MotionValue`\r\n     *\r\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n     *\r\n     * @public\r\n     */\r\n    MotionValue.prototype.getVelocity = function () {\r\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\r\n        return this.canTrackVelocity\r\n            ? // These casts could be avoided if parseFloat would be typed better\r\n                velocityPerSecond(parseFloat(this.current) -\r\n                    parseFloat(this.prev), this.timeDelta)\r\n            : 0;\r\n    };\r\n    /**\r\n     * Registers a new animation to control this `MotionValue`. Only one\r\n     * animation can drive a `MotionValue` at one time.\r\n     *\r\n     * ```jsx\r\n     * value.start()\r\n     * ```\r\n     *\r\n     * @param animation - A function that starts the provided animation\r\n     *\r\n     * @internal\r\n     */\r\n    MotionValue.prototype.start = function (animation) {\r\n        var _this = this;\r\n        this.stop();\r\n        return new Promise(function (resolve) {\r\n            _this.hasAnimated = true;\r\n            _this.stopAnimation = animation(resolve);\r\n        }).then(function () { return _this.clearAnimation(); });\r\n    };\r\n    /**\r\n     * Stop the currently active animation.\r\n     *\r\n     * @public\r\n     */\r\n    MotionValue.prototype.stop = function () {\r\n        if (this.stopAnimation)\r\n            this.stopAnimation();\r\n        this.clearAnimation();\r\n    };\r\n    /**\r\n     * Returns `true` if this value is currently animating.\r\n     *\r\n     * @public\r\n     */\r\n    MotionValue.prototype.isAnimating = function () {\r\n        return !!this.stopAnimation;\r\n    };\r\n    MotionValue.prototype.clearAnimation = function () {\r\n        this.stopAnimation = null;\r\n    };\r\n    /**\r\n     * Destroy and clean up subscribers to this `MotionValue`.\r\n     *\r\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n     * created a `MotionValue` via the `motionValue` function.\r\n     *\r\n     * @public\r\n     */\r\n    MotionValue.prototype.destroy = function () {\r\n        this.updateSubscribers.clear();\r\n        this.renderSubscribers.clear();\r\n        this.stop();\r\n    };\r\n    return MotionValue;\r\n}());\r\n/**\r\n * @internal\r\n */\r\nfunction motionValue(init) {\r\n    return new MotionValue(init);\r\n}\r\n\r\nexport { MotionValue, motionValue };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}