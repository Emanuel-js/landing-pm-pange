{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { progress } from 'popmotion';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n\nvar lastPointerEvent;\n\nvar VisualElementDragControls =\n/** @class */\nfunction () {\n  function VisualElementDragControls(_a) {\n    var visualElement = _a.visualElement;\n    /**\n     * Track whether we're currently dragging.\n     *\n     * @internal\n     */\n\n    this.isDragging = false;\n    /**\n     * The current direction of drag, or `null` if both.\n     *\n     * @internal\n     */\n\n    this.currentDirection = null;\n    /**\n     * The permitted boundaries of travel, in pixels.\n     *\n     * @internal\n     */\n\n    this.constraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     *\n     * @internal\n     */\n\n    this.elastic = axisBox();\n    /**\n     * A reference to the host component's latest props.\n     *\n     * @internal\n     */\n\n    this.props = {};\n    /**\n     * @internal\n     */\n\n    this.hasMutatedConstraints = false;\n    /**\n     * Track the initial position of the cursor relative to the dragging element\n     * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n     * an ideal bounding box for the VisualElement renderer to project into every frame.\n     *\n     * @internal\n     */\n\n    this.cursorProgress = {\n      x: 0.5,\n      y: 0.5\n    }; // When updating _dragX, or _dragY instead of the VisualElement,\n    // persist their values between drag gestures.\n\n    this.originPoint = {}; // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n\n    this.openGlobalLock = null;\n    /**\n     * @internal\n     */\n\n    this.panSession = null;\n    this.visualElement = visualElement;\n    this.visualElement.enableLayoutProjection();\n    elementDragControls.set(visualElement, this);\n  }\n  /**\n   * Instantiate a PanSession for the drag gesture\n   *\n   * @public\n   */\n\n\n  VisualElementDragControls.prototype.start = function (originEvent, _a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.snapToCursor,\n        snapToCursor = _c === void 0 ? false : _c,\n        cursorProgress = _b.cursorProgress;\n    /**\n     * If this drag session has been manually triggered by the user, it might be from an event\n     * outside the draggable element. If snapToCursor is set to true, we need to measure the position\n     * of the element and snap it to the cursor.\n     */\n\n\n    snapToCursor && this.snapToCursor(originEvent);\n\n    var onSessionStart = function () {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      _this.stopMotion();\n    };\n\n    var onStart = function (event, info) {\n      var _a, _b, _c; // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n\n\n      var _d = _this.props,\n          drag = _d.drag,\n          dragPropagation = _d.dragPropagation;\n\n      if (drag && !dragPropagation) {\n        if (_this.openGlobalLock) _this.openGlobalLock();\n        _this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n        if (!_this.openGlobalLock) return;\n      }\n      /**\n       * Record the progress of the mouse within the draggable element on each axis.\n       * onPan, we're going to use this to calculate a new bounding box for the element to\n       * project into. This will ensure that even if the DOM element moves via a relayout, it'll\n       * stick to the correct place under the pointer.\n       */\n\n\n      _this.prepareBoundingBox();\n\n      _this.visualElement.lockProjectionTarget();\n      /**\n       * Resolve the drag constraints. These are either set as top/right/bottom/left constraints\n       * relative to the element's layout, or a ref to another element. Both need converting to\n       * viewport coordinates.\n       */\n\n\n      _this.resolveDragConstraints();\n      /**\n       * When dragging starts, we want to find where the cursor is relative to the bounding box\n       * of the element. Every frame, we calculate a new bounding box using this relative position\n       * and let the visualElement renderer figure out how to reproject the element into this bounding\n       * box.\n       *\n       * By doing it this way, rather than applying an x/y transform directly to the element,\n       * we can ensure the component always visually sticks to the cursor as we'd expect, even\n       * if the DOM element itself changes layout as a result of React updates the user might\n       * make based on the drag position.\n       */\n\n\n      var point = getViewportPointFromEvent(event).point;\n      eachAxis(function (axis) {\n        var _a = _this.visualElement.projection.target[axis],\n            min = _a.min,\n            max = _a.max;\n        _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : progress(min, max, point[axis]);\n        /**\n         * If we have external drag MotionValues, record their origin point. On pointermove\n         * we'll apply the pan gesture offset directly to this value.\n         */\n\n        var axisValue = _this.getAxisMotionValue(axis);\n\n        if (axisValue) {\n          _this.originPoint[axis] = axisValue.get();\n        }\n      }); // Set current drag status\n\n      _this.isDragging = true;\n      _this.currentDirection = null; // Fire onDragStart event\n\n      (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n      (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n    };\n\n    var onMove = function (event, info) {\n      var _a, _b, _c, _d;\n\n      var _e = _this.props,\n          dragPropagation = _e.dragPropagation,\n          dragDirectionLock = _e.dragDirectionLock; // If we didn't successfully receive the gesture lock, early return.\n\n      if (!dragPropagation && !_this.openGlobalLock) return;\n      var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n      if (dragDirectionLock && _this.currentDirection === null) {\n        _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n        if (_this.currentDirection !== null) {\n          (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n        }\n\n        return;\n      } // Update each point with the latest position\n\n\n      _this.updateAxis(\"x\", event, offset);\n\n      _this.updateAxis(\"y\", event, offset); // Fire onDrag event\n\n\n      (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info); // Update the last pointer event\n\n      lastPointerEvent = event;\n    };\n\n    var onEnd = function (event, info) {\n      return _this.stop(event, info);\n    };\n\n    var transformPagePoint = this.props.transformPagePoint;\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart: onSessionStart,\n      onStart: onStart,\n      onMove: onMove,\n      onEnd: onEnd\n    }, {\n      transformPagePoint: transformPagePoint\n    });\n  };\n  /**\n   * Ensure the component's layout and target bounding boxes are up-to-date.\n   */\n\n\n  VisualElementDragControls.prototype.prepareBoundingBox = function () {\n    var visualElement = this.visualElement;\n    visualElement.withoutTransform(function () {\n      visualElement.updateLayoutMeasurement();\n    });\n    visualElement.rebaseProjectionTarget(true, visualElement.measureViewportBox(false));\n  };\n\n  VisualElementDragControls.prototype.resolveDragConstraints = function () {\n    var _this = this;\n\n    var _a = this.props,\n        dragConstraints = _a.dragConstraints,\n        dragElastic = _a.dragElastic;\n\n    if (dragConstraints) {\n      this.constraints = isRefObject(dragConstraints) ? this.resolveRefConstraints(this.visualElement.getLayoutState().layout, dragConstraints) : calcRelativeConstraints(this.visualElement.getLayoutState().layout, dragConstraints);\n    } else {\n      this.constraints = false;\n    }\n\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n\n    if (this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(function (axis) {\n        if (_this.getAxisMotionValue(axis)) {\n          _this.constraints[axis] = rebaseAxisConstraints(_this.visualElement.getLayoutState().layout[axis], _this.constraints[axis]);\n        }\n      });\n    }\n  };\n\n  VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n    var _a = this.props,\n        onMeasureDragConstraints = _a.onMeasureDragConstraints,\n        transformPagePoint = _a.transformPagePoint;\n    var constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n    var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n\n    if (onMeasureDragConstraints) {\n      var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n      }\n    }\n\n    return measuredConstraints;\n  };\n\n  VisualElementDragControls.prototype.cancelDrag = function () {\n    var _a;\n\n    this.isDragging = false;\n    this.panSession && this.panSession.end();\n    this.panSession = null;\n\n    if (!this.props.dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n\n    (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, false);\n  };\n\n  VisualElementDragControls.prototype.stop = function (event, info) {\n    var _a;\n\n    this.visualElement.unlockProjectionTarget();\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = null;\n    var isDragging = this.isDragging;\n    this.cancelDrag();\n    if (!isDragging) return;\n    var _b = this.props,\n        dragMomentum = _b.dragMomentum,\n        onDragEnd = _b.onDragEnd;\n\n    if (dragMomentum || this.elastic) {\n      var velocity = info.velocity;\n      this.animateDragEnd(velocity);\n    }\n\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n  };\n\n  VisualElementDragControls.prototype.snapToCursor = function (event) {\n    var _this = this;\n\n    this.prepareBoundingBox();\n    eachAxis(function (axis) {\n      var drag = _this.props.drag; // If we're not dragging this axis, do an early return.\n\n      if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      if (axisValue) {\n        var point = getViewportPointFromEvent(event).point;\n\n        var box = _this.visualElement.getLayoutState().layout;\n\n        var length_1 = box[axis].max - box[axis].min;\n        var center = box[axis].min + length_1 / 2;\n        var offset = point[axis] - center;\n        _this.originPoint[axis] = point[axis];\n        axisValue.set(offset);\n      } else {\n        _this.cursorProgress[axis] = 0.5;\n\n        _this.updateVisualElementAxis(axis, event);\n      }\n    });\n  };\n  /**\n   * Update the specified axis with the latest pointer information.\n   */\n\n\n  VisualElementDragControls.prototype.updateAxis = function (axis, event, offset) {\n    var drag = this.props.drag; // If we're not dragging this axis, do an early return.\n\n    if (!shouldDrag(axis, drag, this.currentDirection)) return;\n    return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset) : this.updateVisualElementAxis(axis, event);\n  };\n\n  VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n    var axisValue = this.getAxisMotionValue(axis);\n    if (!offset || !axisValue) return;\n    var nextValue = this.originPoint[axis] + offset[axis];\n    var update = this.constraints ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;\n    axisValue.set(update);\n  };\n\n  VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, event) {\n    var _a; // Get the actual layout bounding box of the element\n\n\n    var axisLayout = this.visualElement.getLayoutState().layout[axis]; // Calculate its current length. In the future we might want to lerp this to animate\n    // between lengths if the layout changes as we change the DOM\n\n    var axisLength = axisLayout.max - axisLayout.min; // Get the initial progress that the pointer sat on this axis on gesture start.\n\n    var axisProgress = this.cursorProgress[axis];\n    var point = getViewportPointFromEvent(event).point; // Calculate a new min point based on the latest pointer position, constraints and elastic\n\n    var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]); // Update the axis viewport target with this new min and the length\n\n    this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n  };\n\n  VisualElementDragControls.prototype.setProps = function (_a) {\n    var _b = _a.drag,\n        drag = _b === void 0 ? false : _b,\n        _c = _a.dragDirectionLock,\n        dragDirectionLock = _c === void 0 ? false : _c,\n        _d = _a.dragPropagation,\n        dragPropagation = _d === void 0 ? false : _d,\n        _e = _a.dragConstraints,\n        dragConstraints = _e === void 0 ? false : _e,\n        _f = _a.dragElastic,\n        dragElastic = _f === void 0 ? defaultElastic : _f,\n        _g = _a.dragMomentum,\n        dragMomentum = _g === void 0 ? true : _g,\n        remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n\n    this.props = __assign({\n      drag: drag,\n      dragDirectionLock: dragDirectionLock,\n      dragPropagation: dragPropagation,\n      dragConstraints: dragConstraints,\n      dragElastic: dragElastic,\n      dragMomentum: dragMomentum\n    }, remainingProps);\n  };\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - If the component will perform layout animations, we output the gesture to the component's\n   *      visual bounding box\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n\n\n  VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n    var _a = this.props,\n        layout = _a.layout,\n        layoutId = _a.layoutId;\n    var dragKey = \"_drag\" + axis.toUpperCase();\n\n    if (this.props[dragKey]) {\n      return this.props[dragKey];\n    } else if (!layout && layoutId === undefined) {\n      return this.visualElement.getValue(axis, 0);\n    }\n  };\n\n  VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n    var _this = this;\n\n    var _a = this.props,\n        drag = _a.drag,\n        dragMomentum = _a.dragMomentum,\n        dragElastic = _a.dragElastic,\n        dragTransition = _a.dragTransition;\n    var momentumAnimations = eachAxis(function (axis) {\n      if (!shouldDrag(axis, drag, _this.currentDirection)) {\n        return;\n      }\n\n      var transition = _this.constraints ? _this.constraints[axis] : {};\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n\n      var bounceStiffness = dragElastic ? 200 : 1000000;\n      var bounceDamping = dragElastic ? 40 : 10000000;\n\n      var inertia = __assign(__assign({\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness: bounceStiffness,\n        bounceDamping: bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10\n      }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n\n\n      return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia) : _this.visualElement.startLayoutAnimation(axis, inertia);\n    }); // Run all animations and then resolve the new drag constraints.\n\n    return Promise.all(momentumAnimations).then(function () {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n    });\n  };\n\n  VisualElementDragControls.prototype.stopMotion = function () {\n    var _this = this;\n\n    eachAxis(function (axis) {\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();\n    });\n  };\n\n  VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n    var axisValue = this.getAxisMotionValue(axis);\n    if (!axisValue) return;\n    var currentValue = axisValue.get();\n    axisValue.set(currentValue);\n    axisValue.set(currentValue); // Set twice to hard-reset velocity\n\n    return startAnimation(axis, axisValue, 0, transition);\n  };\n\n  VisualElementDragControls.prototype.scalePoint = function () {\n    var _this = this;\n\n    var _a = this.props,\n        drag = _a.drag,\n        dragConstraints = _a.dragConstraints;\n    if (!isRefObject(dragConstraints) || !this.constraintsBox) return; // Stop any current animations as there can be some visual glitching if we resize mid animation\n\n    this.stopMotion(); // Record the relative progress of the targetBox relative to the constraintsBox\n\n    var boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(function (axis) {\n      boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n    });\n    /**\n     * For each axis, calculate the current progress of the layout axis within the constraints.\n     * Then, using the latest layout and constraints measurements, reposition the new layout axis\n     * proportionally within the constraints.\n     */\n\n    this.prepareBoundingBox();\n    this.resolveDragConstraints();\n    eachAxis(function (axis) {\n      if (!shouldDrag(axis, drag, null)) return; // Calculate the position of the targetBox relative to the constraintsBox using the\n      // previously calculated progress\n\n      var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]),\n          min = _a.min,\n          max = _a.max;\n\n      _this.visualElement.setProjectionTargetAxis(axis, min, max);\n    });\n  };\n\n  VisualElementDragControls.prototype.mount = function (visualElement) {\n    var _this = this;\n\n    var element = visualElement.getInstance();\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n\n    var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n      var _a = _this.props,\n          drag = _a.drag,\n          _b = _a.dragListener,\n          dragListener = _b === void 0 ? true : _b;\n      drag && dragListener && _this.start(event);\n    });\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n\n    var stopResizeListener = addDomEvent(window, \"resize\", function () {\n      _this.scalePoint();\n    });\n    /**\n     * Ensure drag constraints are resolved correctly relative to the dragging element\n     * whenever its layout changes.\n     */\n\n    var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n      if (_this.isDragging) _this.resolveDragConstraints();\n    });\n    /**\n     * If the previous component with this same layoutId was dragging at the time\n     * it was unmounted, we want to continue the same gesture on this component.\n     */\n\n    var prevDragCursor = visualElement.prevDragCursor;\n\n    if (prevDragCursor) {\n      this.start(lastPointerEvent, {\n        cursorProgress: prevDragCursor\n      });\n    }\n    /**\n     * Return a function that will teardown the drag gesture\n     */\n\n\n    return function () {\n      stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n      stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n      stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n\n      _this.cancelDrag();\n    };\n  };\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset, lockThreshold) {\n  if (lockThreshold === void 0) {\n    lockThreshold = 10;\n  }\n\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["__rest","__assign","invariant","progress","PanSession","getGlobalLock","isRefObject","addPointerEvent","addDomEvent","getViewportPointFromEvent","axisBox","convertAxisBoxToBoundingBox","convertBoundingBoxToAxisBox","eachAxis","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","applyConstraints","calcConstrainedMinPoint","calcPositionFromProgress","defaultElastic","getBoundingBox","calcOrigin","startAnimation","AnimationType","elementDragControls","WeakMap","lastPointerEvent","VisualElementDragControls","_a","visualElement","isDragging","currentDirection","constraints","elastic","props","hasMutatedConstraints","cursorProgress","x","y","originPoint","openGlobalLock","panSession","enableLayoutProjection","set","prototype","start","originEvent","_this","_b","_c","snapToCursor","onSessionStart","stopMotion","onStart","event","info","_d","drag","dragPropagation","prepareBoundingBox","lockProjectionTarget","resolveDragConstraints","point","axis","projection","target","min","max","axisValue","getAxisMotionValue","get","onDragStart","call","animationState","setActive","Drag","onMove","_e","dragDirectionLock","offset","getCurrentDirection","onDirectionLock","updateAxis","onDrag","onEnd","stop","transformPagePoint","withoutTransform","updateLayoutMeasurement","rebaseProjectionTarget","measureViewportBox","dragConstraints","dragElastic","resolveRefConstraints","getLayoutState","layout","layoutBox","onMeasureDragConstraints","constraintsElement","current","constraintsBox","measuredConstraints","userConstraints","cancelDrag","end","unlockProjectionTarget","dragMomentum","onDragEnd","velocity","animateDragEnd","shouldDrag","box","length_1","center","updateVisualElementAxis","updateAxisMotionValue","nextValue","update","axisLayout","axisLength","axisProgress","setProjectionTargetAxis","setProps","_f","_g","remainingProps","layoutId","dragKey","toUpperCase","undefined","getValue","dragTransition","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","startLayoutAnimation","Promise","all","then","onDragTransitionEnd","stopLayoutAnimation","currentValue","scalePoint","boxProgress","mount","element","getInstance","stopPointerListener","dragListener","stopResizeListener","window","stopLayoutUpdateListener","onLayoutUpdate","prevDragCursor","direction","lockThreshold","Math","abs"],"sources":["C:/Users/User/Desktop/ArifPAy/other file/me/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js"],"sourcesContent":["import { __rest, __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { progress } from 'popmotion';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\nvar lastPointerEvent;\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(_a) {\n        var visualElement = _a.visualElement;\n        /**\n         * Track whether we're currently dragging.\n         *\n         * @internal\n         */\n        this.isDragging = false;\n        /**\n         * The current direction of drag, or `null` if both.\n         *\n         * @internal\n         */\n        this.currentDirection = null;\n        /**\n         * The permitted boundaries of travel, in pixels.\n         *\n         * @internal\n         */\n        this.constraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         *\n         * @internal\n         */\n        this.elastic = axisBox();\n        /**\n         * A reference to the host component's latest props.\n         *\n         * @internal\n         */\n        this.props = {};\n        /**\n         * @internal\n         */\n        this.hasMutatedConstraints = false;\n        /**\n         * Track the initial position of the cursor relative to the dragging element\n         * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n         * an ideal bounding box for the VisualElement renderer to project into every frame.\n         *\n         * @internal\n         */\n        this.cursorProgress = {\n            x: 0.5,\n            y: 0.5,\n        };\n        // When updating _dragX, or _dragY instead of the VisualElement,\n        // persist their values between drag gestures.\n        this.originPoint = {};\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        /**\n         * @internal\n         */\n        this.panSession = null;\n        this.visualElement = visualElement;\n        this.visualElement.enableLayoutProjection();\n        elementDragControls.set(visualElement, this);\n    }\n    /**\n     * Instantiate a PanSession for the drag gesture\n     *\n     * @public\n     */\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;\n        /**\n         * If this drag session has been manually triggered by the user, it might be from an event\n         * outside the draggable element. If snapToCursor is set to true, we need to measure the position\n         * of the element and snap it to the cursor.\n         */\n        snapToCursor && this.snapToCursor(originEvent);\n        var onSessionStart = function () {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopMotion();\n        };\n        var onStart = function (event, info) {\n            var _a, _b, _c;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _d = _this.props, drag = _d.drag, dragPropagation = _d.dragPropagation;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            /**\n             * Record the progress of the mouse within the draggable element on each axis.\n             * onPan, we're going to use this to calculate a new bounding box for the element to\n             * project into. This will ensure that even if the DOM element moves via a relayout, it'll\n             * stick to the correct place under the pointer.\n             */\n            _this.prepareBoundingBox();\n            _this.visualElement.lockProjectionTarget();\n            /**\n             * Resolve the drag constraints. These are either set as top/right/bottom/left constraints\n             * relative to the element's layout, or a ref to another element. Both need converting to\n             * viewport coordinates.\n             */\n            _this.resolveDragConstraints();\n            /**\n             * When dragging starts, we want to find where the cursor is relative to the bounding box\n             * of the element. Every frame, we calculate a new bounding box using this relative position\n             * and let the visualElement renderer figure out how to reproject the element into this bounding\n             * box.\n             *\n             * By doing it this way, rather than applying an x/y transform directly to the element,\n             * we can ensure the component always visually sticks to the cursor as we'd expect, even\n             * if the DOM element itself changes layout as a result of React updates the user might\n             * make based on the drag position.\n             */\n            var point = getViewportPointFromEvent(event).point;\n            eachAxis(function (axis) {\n                var _a = _this.visualElement.projection.target[axis], min = _a.min, max = _a.max;\n                _this.cursorProgress[axis] = cursorProgress\n                    ? cursorProgress[axis]\n                    : progress(min, max, point[axis]);\n                /**\n                 * If we have external drag MotionValues, record their origin point. On pointermove\n                 * we'll apply the pan gesture offset directly to this value.\n                 */\n                var axisValue = _this.getAxisMotionValue(axis);\n                if (axisValue) {\n                    _this.originPoint[axis] = axisValue.get();\n                }\n            });\n            // Set current drag status\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            // Fire onDragStart event\n            (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n            (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", event, offset);\n            _this.updateAxis(\"y\", event, offset);\n            // Fire onDrag event\n            (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n            // Update the last pointer event\n            lastPointerEvent = event;\n        };\n        var onEnd = function (event, info) { return _this.stop(event, info); };\n        var transformPagePoint = this.props.transformPagePoint;\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onEnd: onEnd,\n        }, { transformPagePoint: transformPagePoint });\n    };\n    /**\n     * Ensure the component's layout and target bounding boxes are up-to-date.\n     */\n    VisualElementDragControls.prototype.prepareBoundingBox = function () {\n        var visualElement = this.visualElement;\n        visualElement.withoutTransform(function () {\n            visualElement.updateLayoutMeasurement();\n        });\n        visualElement.rebaseProjectionTarget(true, visualElement.measureViewportBox(false));\n    };\n    VisualElementDragControls.prototype.resolveDragConstraints = function () {\n        var _this = this;\n        var _a = this.props, dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        if (dragConstraints) {\n            this.constraints = isRefObject(dragConstraints)\n                ? this.resolveRefConstraints(this.visualElement.getLayoutState().layout, dragConstraints)\n                : calcRelativeConstraints(this.visualElement.getLayoutState().layout, dragConstraints);\n        }\n        else {\n            this.constraints = false;\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (this.constraints && !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(_this.visualElement.getLayoutState().layout[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n        var _a = this.props, onMeasureDragConstraints = _a.onMeasureDragConstraints, transformPagePoint = _a.transformPagePoint;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.cancelDrag = function () {\n        var _a;\n        this.isDragging = false;\n        this.panSession && this.panSession.end();\n        this.panSession = null;\n        if (!this.props.dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var _a;\n        this.visualElement.unlockProjectionTarget();\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = null;\n        var isDragging = this.isDragging;\n        this.cancelDrag();\n        if (!isDragging)\n            return;\n        var _b = this.props, dragMomentum = _b.dragMomentum, onDragEnd = _b.onDragEnd;\n        if (dragMomentum || this.elastic) {\n            var velocity = info.velocity;\n            this.animateDragEnd(velocity);\n        }\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (event) {\n        var _this = this;\n        this.prepareBoundingBox();\n        eachAxis(function (axis) {\n            var drag = _this.props.drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var point = getViewportPointFromEvent(event).point;\n                var box = _this.visualElement.getLayoutState().layout;\n                var length_1 = box[axis].max - box[axis].min;\n                var center = box[axis].min + length_1 / 2;\n                var offset = point[axis] - center;\n                _this.originPoint[axis] = point[axis];\n                axisValue.set(offset);\n            }\n            else {\n                _this.cursorProgress[axis] = 0.5;\n                _this.updateVisualElementAxis(axis, event);\n            }\n        });\n    };\n    /**\n     * Update the specified axis with the latest pointer information.\n     */\n    VisualElementDragControls.prototype.updateAxis = function (axis, event, offset) {\n        var drag = this.props.drag;\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, this.currentDirection))\n            return;\n        return this.getAxisMotionValue(axis)\n            ? this.updateAxisMotionValue(axis, offset)\n            : this.updateVisualElementAxis(axis, event);\n    };\n    VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!offset || !axisValue)\n            return;\n        var nextValue = this.originPoint[axis] + offset[axis];\n        var update = this.constraints\n            ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis])\n            : nextValue;\n        axisValue.set(update);\n    };\n    VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, event) {\n        var _a;\n        // Get the actual layout bounding box of the element\n        var axisLayout = this.visualElement.getLayoutState().layout[axis];\n        // Calculate its current length. In the future we might want to lerp this to animate\n        // between lengths if the layout changes as we change the DOM\n        var axisLength = axisLayout.max - axisLayout.min;\n        // Get the initial progress that the pointer sat on this axis on gesture start.\n        var axisProgress = this.cursorProgress[axis];\n        var point = getViewportPointFromEvent(event).point;\n        // Calculate a new min point based on the latest pointer position, constraints and elastic\n        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);\n        // Update the axis viewport target with this new min and the length\n        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n    };\n    VisualElementDragControls.prototype.setProps = function (_a) {\n        var _b = _a.drag, drag = _b === void 0 ? false : _b, _c = _a.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n        this.props = __assign({ drag: drag,\n            dragDirectionLock: dragDirectionLock,\n            dragPropagation: dragPropagation,\n            dragConstraints: dragConstraints,\n            dragElastic: dragElastic,\n            dragMomentum: dragMomentum }, remainingProps);\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - If the component will perform layout animations, we output the gesture to the component's\n     *      visual bounding box\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a = this.props, layout = _a.layout, layoutId = _a.layoutId;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        if (this.props[dragKey]) {\n            return this.props[dragKey];\n        }\n        else if (!layout && layoutId === undefined) {\n            return this.visualElement.getValue(axis, 0);\n        }\n    };\n    VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition;\n        var momentumAnimations = eachAxis(function (axis) {\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = _this.constraints ? _this.constraints[axis] : {};\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness,\n                bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.getAxisMotionValue(axis)\n                ? _this.startAxisValueAnimation(axis, inertia)\n                : _this.visualElement.startLayoutAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(function () {\n            var _a, _b;\n            (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n    };\n    VisualElementDragControls.prototype.stopMotion = function () {\n        var _this = this;\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            axisValue\n                ? axisValue.stop()\n                : _this.visualElement.stopLayoutAnimation();\n        });\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!axisValue)\n            return;\n        var currentValue = axisValue.get();\n        axisValue.set(currentValue);\n        axisValue.set(currentValue); // Set twice to hard-reset velocity\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.scalePoint = function () {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragConstraints = _a.dragConstraints;\n        if (!isRefObject(dragConstraints) || !this.constraintsBox)\n            return;\n        // Stop any current animations as there can be some visual glitching if we resize mid animation\n        this.stopMotion();\n        // Record the relative progress of the targetBox relative to the constraintsBox\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n        });\n        /**\n         * For each axis, calculate the current progress of the layout axis within the constraints.\n         * Then, using the latest layout and constraints measurements, reposition the new layout axis\n         * proportionally within the constraints.\n         */\n        this.prepareBoundingBox();\n        this.resolveDragConstraints();\n        eachAxis(function (axis) {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            // Calculate the position of the targetBox relative to the constraintsBox using the\n            // previously calculated progress\n            var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a.min, max = _a.max;\n            _this.visualElement.setProjectionTargetAxis(axis, min, max);\n        });\n    };\n    VisualElementDragControls.prototype.mount = function (visualElement) {\n        var _this = this;\n        var element = visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.props, drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            _this.scalePoint();\n        });\n        /**\n         * Ensure drag constraints are resolved correctly relative to the dragging element\n         * whenever its layout changes.\n         */\n        var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n            if (_this.isDragging)\n                _this.resolveDragConstraints();\n        });\n        /**\n         * If the previous component with this same layoutId was dragging at the time\n         * it was unmounted, we want to continue the same gesture on this component.\n         */\n        var prevDragCursor = visualElement.prevDragCursor;\n        if (prevDragCursor) {\n            this.start(lastPointerEvent, { cursorProgress: prevDragCursor });\n        }\n        /**\n         * Return a function that will teardown the drag gesture\n         */\n        return function () {\n            stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n            stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n            _this.cancelDrag();\n        };\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}