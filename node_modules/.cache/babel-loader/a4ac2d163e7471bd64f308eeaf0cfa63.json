{"ast":null,"code":"import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.js';\nimport { shallowCompare } from '../../utils/shallow-compare.js';\nimport { animateVisualElement } from './animation.js';\nimport { AnimationType } from './types.js';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.js';\nvar variantPriorityOrder = [AnimationType.Animate, AnimationType.Hover, AnimationType.Tap, AnimationType.Drag, AnimationType.Focus, AnimationType.Exit];\n\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();\n\nvar numAnimationTypes = variantPriorityOrder.length;\n\nfunction animateList(visualElement) {\n  return function (animations) {\n    return Promise.all(animations.map(function (_a) {\n      var animation = _a.animation,\n          options = _a.options;\n      return animateVisualElement(visualElement, animation, options);\n    }));\n  };\n}\n\nfunction createAnimationState(visualElement) {\n  var animate = animateList(visualElement);\n  var state = createState();\n  var allAnimatedKeys = {};\n  var isInitialRender = true;\n  /**\n   * This function will be used to reduce the animation definitions for\n   * each active animation type into an object of resolved values for it.\n   */\n\n  var buildResolvedTypeValues = function (acc, definition) {\n    var resolved = resolveVariant(visualElement, definition);\n\n    if (resolved) {\n      resolved.transition;\n\n      var transitionEnd = resolved.transitionEnd,\n          target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n\n      acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n    }\n\n    return acc;\n  };\n\n  function isAnimated(key) {\n    return allAnimatedKeys[key] !== undefined;\n  }\n  /**\n   * This just allows us to inject mocked animation functions\n   * @internal\n   */\n\n\n  function setAnimateFunction(makeAnimator) {\n    animate = makeAnimator(visualElement);\n  }\n  /**\n   * When we receive new props, we need to:\n   * 1. Create a list of protected keys for each type. This is a directory of\n   *    value keys that are currently being \"handled\" by types of a higher priority\n   *    so that whenever an animation is played of a given type, these values are\n   *    protected from being animated.\n   * 2. Determine if an animation type needs animating.\n   * 3. Determine if any values have been removed from a type and figure out\n   *    what to animate those to.\n   */\n\n\n  function animateChanges(options, changedActiveType) {\n    var _a;\n\n    var props = visualElement.getProps();\n    var context = visualElement.getVariantContext(true) || {};\n    /**\n     * A list of animations that we'll build into as we iterate through the animation\n     * types. This will get executed at the end of the function.\n     */\n\n    var animations = [];\n    /**\n     * Keep track of which values have been removed. Then, as we hit lower priority\n     * animation types, we can check if they contain removed values and animate to that.\n     */\n\n    var removedKeys = new Set();\n    /**\n     * A dictionary of all encountered keys. This is an object to let us build into and\n     * copy it without iteration. Each time we hit an animation type we set its protected\n     * keys - the keys its not allowed to animate - to the latest version of this object.\n     */\n\n    var encounteredKeys = {};\n    /**\n     * If a variant has been removed at a given index, and this component is controlling\n     * variant animations, we want to ensure lower-priority variants are forced to animate.\n     */\n\n    var removedVariantIndex = Infinity;\n\n    var _loop_1 = function (i) {\n      var type = reversePriorityOrder[i];\n      var typeState = state[type];\n      var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n      var propIsVariant = isVariantLabel(prop);\n      /**\n       * If this type has *just* changed isActive status, set activeDelta\n       * to that status. Otherwise set to null.\n       */\n\n      var activeDelta = type === changedActiveType ? typeState.isActive : null;\n      if (activeDelta === false) removedVariantIndex = i;\n      /**\n       * If this prop is an inherited variant, rather than been set directly on the\n       * component itself, we want to make sure we allow the parent to trigger animations.\n       *\n       * TODO: Can probably change this to a !isControllingVariants check\n       */\n\n      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n      /**\n       *\n       */\n\n      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n        isInherited = false;\n      }\n      /**\n       * Set all encountered keys so far as the protected keys for this type. This will\n       * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n       */\n\n\n      typeState.protectedKeys = __assign({}, encounteredKeys); // Check if we can skip analysing this prop early\n\n      if ( // If it isn't active and hasn't *just* been set as inactive\n      !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n      !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n      isAnimationControls(prop) || typeof prop === \"boolean\") {\n        return \"continue\";\n      }\n      /**\n       * As we go look through the values defined on this type, if we detect\n       * a changed value or a value that was removed in a higher priority, we set\n       * this to true and add this prop to the animation list.\n       */\n\n\n      var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) || // If we're making this variant active, we want to always make it active\n      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n      i > removedVariantIndex && propIsVariant;\n      /**\n       * As animations can be set as variant lists, variants or target objects, we\n       * coerce everything to an array if it isn't one already\n       */\n\n      var definitionList = Array.isArray(prop) ? prop : [prop];\n      /**\n       * Build an object of all the resolved values. We'll use this in the subsequent\n       * animateChanges calls to determine whether a value has changed.\n       */\n\n      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n      if (activeDelta === false) resolvedValues = {};\n      /**\n       * Now we need to loop through all the keys in the prev prop and this prop,\n       * and decide:\n       * 1. If the value has changed, and needs animating\n       * 2. If it has been removed, and needs adding to the removedKeys set\n       * 3. If it has been removed in a higher priority type and needs animating\n       * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n       *    needs adding to the type's protectedKeys list.\n       */\n\n      var _b = typeState.prevResolvedValues,\n          prevResolvedValues = _b === void 0 ? {} : _b;\n\n      var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n\n      var markToAnimate = function (key) {\n        shouldAnimateType = true;\n        removedKeys.delete(key);\n        typeState.needsAnimating[key] = true;\n      };\n\n      for (var key in allKeys) {\n        var next = resolvedValues[key];\n        var prev = prevResolvedValues[key]; // If we've already handled this we can just skip ahead\n\n        if (encounteredKeys.hasOwnProperty(key)) continue;\n        /**\n         * If the value has changed, we probably want to animate it.\n         */\n\n        if (next !== prev) {\n          /**\n           * If both values are keyframes, we need to shallow compare them to\n           * detect whether any value has changed. If it has, we animate it.\n           */\n          if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n            if (!shallowCompare(next, prev)) {\n              markToAnimate(key);\n            } else {\n              /**\n               * If it hasn't changed, we want to ensure it doesn't animate by\n               * adding it to the list of protected keys.\n               */\n              typeState.protectedKeys[key] = true;\n            }\n          } else if (next !== undefined) {\n            // If next is defined and doesn't equal prev, it needs animating\n            markToAnimate(key);\n          } else {\n            // If it's undefined, it's been removed.\n            removedKeys.add(key);\n          }\n        } else if (next !== undefined && removedKeys.has(key)) {\n          /**\n           * If next hasn't changed and it isn't undefined, we want to check if it's\n           * been removed by a higher priority\n           */\n          markToAnimate(key);\n        } else {\n          /**\n           * If it hasn't changed, we add it to the list of protected values\n           * to ensure it doesn't get animated.\n           */\n          typeState.protectedKeys[key] = true;\n        }\n      }\n      /**\n       * Update the typeState so next time animateChanges is called we can compare the\n       * latest prop and resolvedValues to these.\n       */\n\n\n      typeState.prevProp = prop;\n      typeState.prevResolvedValues = resolvedValues;\n      /**\n       *\n       */\n\n      if (typeState.isActive) {\n        encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n      }\n\n      if (isInitialRender && visualElement.blockInitialAnimation) {\n        shouldAnimateType = false;\n      }\n      /**\n       * If this is an inherited prop we want to hard-block animations\n       * TODO: Test as this should probably still handle animations triggered\n       * by removed values?\n       */\n\n\n      if (shouldAnimateType && !isInherited) {\n        animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) {\n          return {\n            animation: animation,\n            options: __assign({\n              type: type\n            }, options)\n          };\n        }))));\n      }\n    };\n    /**\n     * Iterate through all animation types in reverse priority order. For each, we want to\n     * detect which values it's handling and whether or not they've changed (and therefore\n     * need to be animated). If any values have been removed, we want to detect those in\n     * lower priority props and flag for animation.\n     */\n\n\n    for (var i = 0; i < numAnimationTypes; i++) {\n      _loop_1(i);\n    }\n\n    allAnimatedKeys = __assign({}, encounteredKeys);\n    /**\n     * If there are some removed value that haven't been dealt with,\n     * we need to create a new animation that falls back either to the value\n     * defined in the style prop, or the last read value.\n     */\n\n    if (removedKeys.size) {\n      var fallbackAnimation_1 = {};\n      removedKeys.forEach(function (key) {\n        var fallbackTarget = visualElement.getBaseTarget(key);\n\n        if (fallbackTarget !== undefined) {\n          fallbackAnimation_1[key] = fallbackTarget;\n        }\n      });\n      animations.push({\n        animation: fallbackAnimation_1\n      });\n    }\n\n    var shouldAnimate = Boolean(animations.length);\n\n    if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {\n      shouldAnimate = false;\n    }\n\n    isInitialRender = false;\n    return shouldAnimate ? animate(animations) : Promise.resolve();\n  }\n  /**\n   * Change whether a certain animation type is active.\n   */\n\n\n  function setActive(type, isActive, options) {\n    var _a; // If the active state hasn't changed, we can safely do nothing here\n\n\n    if (state[type].isActive === isActive) return Promise.resolve(); // Propagate active change to children\n\n    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n      var _a;\n\n      return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n    });\n    state[type].isActive = isActive;\n    return animateChanges(options, type);\n  }\n\n  return {\n    isAnimated: isAnimated,\n    animateChanges: animateChanges,\n    setActive: setActive,\n    setAnimateFunction: setAnimateFunction,\n    getState: function () {\n      return state;\n    }\n  };\n}\n\nfunction variantsHaveChanged(prev, next) {\n  if (typeof next === \"string\") {\n    return next !== prev;\n  } else if (isVariantLabels(next)) {\n    return !shallowCompare(next, prev);\n  }\n\n  return false;\n}\n\nfunction createTypeState(isActive) {\n  if (isActive === void 0) {\n    isActive = false;\n  }\n\n  return {\n    isActive: isActive,\n    protectedKeys: {},\n    needsAnimating: {},\n    prevResolvedValues: {}\n  };\n}\n\nfunction createState() {\n  var _a;\n\n  return _a = {}, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;\n}\n\nexport { createAnimationState, variantPriorityOrder, variantsHaveChanged };","map":{"version":3,"names":["__spreadArray","__read","__assign","__rest","isAnimationControls","isKeyframesTarget","shallowCompare","animateVisualElement","AnimationType","isVariantLabels","resolveVariant","isVariantLabel","variantPriorityOrder","Animate","Hover","Tap","Drag","Focus","Exit","reversePriorityOrder","reverse","numAnimationTypes","length","animateList","visualElement","animations","Promise","all","map","_a","animation","options","createAnimationState","animate","state","createState","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","definition","resolved","transition","transitionEnd","target","isAnimated","key","undefined","setAnimateFunction","makeAnimator","animateChanges","changedActiveType","props","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","_loop_1","i","type","typeState","prop","propIsVariant","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","shouldAnimateType","variantsHaveChanged","definitionList","Array","isArray","resolvedValues","reduce","_b","prevResolvedValues","allKeys","markToAnimate","delete","needsAnimating","next","prev","hasOwnProperty","add","has","blockInitialAnimation","push","apply","size","fallbackAnimation_1","forEach","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","resolve","setActive","variantChildren","child","animationState","getState","createTypeState"],"sources":["C:/Users/User/Desktop/ArifPAy/other file/me/node_modules/framer-motion/dist/es/render/utils/animation-state.js"],"sourcesContent":["import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.js';\nimport { shallowCompare } from '../../utils/shallow-compare.js';\nimport { animateVisualElement } from './animation.js';\nimport { AnimationType } from './types.js';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.js';\n\nvar variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Focus,\n    AnimationType.Exit,\n];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function (animations) {\n        return Promise.all(animations.map(function (_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    var buildResolvedTypeValues = function (acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        var removedVariantIndex = Infinity;\n        var _loop_1 = function (i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = __assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            var definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function (key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (var key in allKeys) {\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev)) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\n                    animation: animation,\n                    options: __assign({ type: type }, options),\n                }); }))));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (var i = 0; i < numAnimationTypes; i++) {\n            _loop_1(i);\n        }\n        allAnimatedKeys = __assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function (key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation_1 });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        return animateChanges(options, type);\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function () { return state; },\n    };\n}\nfunction variantsHaveChanged(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) { isActive = false; }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {},\n        _a[AnimationType.Animate] = createTypeState(true),\n        _a[AnimationType.Hover] = createTypeState(),\n        _a[AnimationType.Tap] = createTypeState(),\n        _a[AnimationType.Drag] = createTypeState(),\n        _a[AnimationType.Focus] = createTypeState(),\n        _a[AnimationType.Exit] = createTypeState(),\n        _a;\n}\n\nexport { createAnimationState, variantPriorityOrder, variantsHaveChanged };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}