{"ast":null,"code":"import { __read } from 'tslib';\nimport { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.js';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useConstant } from '../utils/use-constant.js';\n/**\r\n * Creates a `MotionValue` to track the state and velocity of a value.\r\n *\r\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\r\n *\r\n * @library\r\n *\r\n * ```jsx\r\n * export function MyComponent() {\r\n *   const scale = useMotionValue(1)\r\n *\r\n *   return <Frame scale={scale} />\r\n * }\r\n * ```\r\n *\r\n * @motion\r\n *\r\n * ```jsx\r\n * export const MyComponent = () => {\r\n *   const scale = useMotionValue(1)\r\n *\r\n *   return <motion.div style={{ scale }} />\r\n * }\r\n * ```\r\n *\r\n * @param initial - The initial state.\r\n *\r\n * @public\r\n */\n\nfunction useMotionValue(initial) {\n  var value = useConstant(function () {\n    return motionValue(initial);\n  });\n  /**\r\n   * If this motion value is being used in static mode, like on\r\n   * the Framer canvas, force components to rerender when the motion\r\n   * value is updated.\r\n   */\n\n  var isStatic = useContext(MotionConfigContext).isStatic;\n\n  if (isStatic) {\n    var _a = __read(useState(initial), 2),\n        setLatest_1 = _a[1];\n\n    useEffect(function () {\n      return value.onChange(setLatest_1);\n    }, []);\n  }\n\n  return value;\n}\n\nexport { useMotionValue };","map":{"version":3,"names":["__read","useContext","useState","useEffect","motionValue","MotionConfigContext","useConstant","useMotionValue","initial","value","isStatic","_a","setLatest_1","onChange"],"sources":["E:/Projects/project/project mangement dashbord/landing-pm-pange/node_modules/framer-motion/dist/es/value/use-motion-value.js"],"sourcesContent":["import { __read } from 'tslib';\r\nimport { useContext, useState, useEffect } from 'react';\r\nimport { motionValue } from './index.js';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\r\nimport { useConstant } from '../utils/use-constant.js';\r\n\r\n/**\r\n * Creates a `MotionValue` to track the state and velocity of a value.\r\n *\r\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\r\n *\r\n * @library\r\n *\r\n * ```jsx\r\n * export function MyComponent() {\r\n *   const scale = useMotionValue(1)\r\n *\r\n *   return <Frame scale={scale} />\r\n * }\r\n * ```\r\n *\r\n * @motion\r\n *\r\n * ```jsx\r\n * export const MyComponent = () => {\r\n *   const scale = useMotionValue(1)\r\n *\r\n *   return <motion.div style={{ scale }} />\r\n * }\r\n * ```\r\n *\r\n * @param initial - The initial state.\r\n *\r\n * @public\r\n */\r\nfunction useMotionValue(initial) {\r\n    var value = useConstant(function () { return motionValue(initial); });\r\n    /**\r\n     * If this motion value is being used in static mode, like on\r\n     * the Framer canvas, force components to rerender when the motion\r\n     * value is updated.\r\n     */\r\n    var isStatic = useContext(MotionConfigContext).isStatic;\r\n    if (isStatic) {\r\n        var _a = __read(useState(initial), 2), setLatest_1 = _a[1];\r\n        useEffect(function () { return value.onChange(setLatest_1); }, []);\r\n    }\r\n    return value;\r\n}\r\n\r\nexport { useMotionValue };\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;EAC7B,IAAIC,KAAK,GAAGH,WAAW,CAAC,YAAY;IAAE,OAAOF,WAAW,CAACI,OAAD,CAAlB;EAA8B,CAA7C,CAAvB;EACA;AACJ;AACA;AACA;AACA;;EACI,IAAIE,QAAQ,GAAGT,UAAU,CAACI,mBAAD,CAAV,CAAgCK,QAA/C;;EACA,IAAIA,QAAJ,EAAc;IACV,IAAIC,EAAE,GAAGX,MAAM,CAACE,QAAQ,CAACM,OAAD,CAAT,EAAoB,CAApB,CAAf;IAAA,IAAuCI,WAAW,GAAGD,EAAE,CAAC,CAAD,CAAvD;;IACAR,SAAS,CAAC,YAAY;MAAE,OAAOM,KAAK,CAACI,QAAN,CAAeD,WAAf,CAAP;IAAqC,CAApD,EAAsD,EAAtD,CAAT;EACH;;EACD,OAAOH,KAAP;AACH;;AAED,SAASF,cAAT"},"metadata":{},"sourceType":"module"}