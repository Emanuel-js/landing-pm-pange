{"ast":null,"code":"import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { copyAxisBox, axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\n\nvar visualElement = function (_a) {\n  var _b = _a.treeType,\n      treeType = _b === void 0 ? \"\" : _b,\n      build = _a.build,\n      getBaseTarget = _a.getBaseTarget,\n      makeTargetAnimatable = _a.makeTargetAnimatable,\n      measureViewportBox = _a.measureViewportBox,\n      renderInstance = _a.render,\n      readValueFromInstance = _a.readValueFromInstance,\n      resetTransform = _a.resetTransform,\n      restoreTransform = _a.restoreTransform,\n      removeValueFromRenderState = _a.removeValueFromRenderState,\n      sortNodePosition = _a.sortNodePosition,\n      scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n  return function (_a, options) {\n    var parent = _a.parent,\n        props = _a.props,\n        presenceId = _a.presenceId,\n        blockInitialAnimation = _a.blockInitialAnimation,\n        visualState = _a.visualState;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    /**\r\n     * The instance of the render-specific node that will be hydrated by the\r\n     * exposed React ref. So for example, this visual element can host a\r\n     * HTMLElement, plain object, or Three.js object. The functions provided\r\n     * in VisualElementConfig allow us to interface with this instance.\r\n     */\n\n    var instance;\n    /**\r\n     * Manages the subscriptions for a visual element's lifecycle, for instance\r\n     * onRender and onViewportBoxUpdate.\r\n     */\n\n    var lifecycles = createLifecycles();\n    /**\r\n     *\r\n     */\n\n    var projection = createProjectionState();\n    /**\r\n     * A reference to the nearest projecting parent. This is either\r\n     * undefined if we haven't looked for the nearest projecting parent,\r\n     * false if there is no parent performing layout projection, or a reference\r\n     * to the projecting parent.\r\n     */\n\n    var projectionParent;\n    /**\r\n     * This is a reference to the visual state of the \"lead\" visual element.\r\n     * Usually, this will be this visual element. But if it shares a layoutId\r\n     * with other visual elements, only one of them will be designated lead by\r\n     * AnimateSharedLayout. All the other visual elements will take on the visual\r\n     * appearance of the lead while they crossfade to it.\r\n     */\n\n    var leadProjection = projection;\n    var leadLatestValues = latestValues;\n    var unsubscribeFromLeadVisualElement;\n    /**\r\n     * The latest layout measurements and calculated projections. This\r\n     * is seperate from the target projection data in visualState as\r\n     * many visual elements might point to the same piece of visualState as\r\n     * a target, whereas they might each have different layouts and thus\r\n     * projection calculations needed to project into the same viewport box.\r\n     */\n\n    var layoutState = createLayoutState();\n    /**\r\n     *\r\n     */\n\n    var crossfader;\n    /**\r\n     * Keep track of whether the viewport box has been updated since the\r\n     * last time the layout projection was re-calculated.\r\n     */\n\n    var hasViewportBoxUpdated = false;\n    /**\r\n     * A map of all motion values attached to this visual element. Motion\r\n     * values are source of truth for any given animated value. A motion\r\n     * value might be provided externally by the component via props.\r\n     */\n\n    var values = new Map();\n    /**\r\n     * A map of every subscription that binds the provided or generated\r\n     * motion values onChange listeners to this visual element.\r\n     */\n\n    var valueSubscriptions = new Map();\n    /**\r\n     * A reference to the previously-provided motion values as returned\r\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\r\n     * if any motion values need to be removed after props are updated.\r\n     */\n\n    var prevMotionValues = {};\n    /**\r\n     * x/y motion values that track the progress of initiated layout\r\n     * animations.\r\n     *\r\n     * TODO: Target for removal\r\n     */\n\n    var projectionTargetProgress;\n    /**\r\n     * When values are removed from all animation props we need to search\r\n     * for a fallback value to animate to. These values are tracked in baseTarget.\r\n     */\n\n    var baseTarget = __assign({}, latestValues); // Internal methods ========================\n\n    /**\r\n     * On mount, this will be hydrated with a callback to disconnect\r\n     * this visual element from its parent on unmount.\r\n     */\n\n\n    var removeFromVariantTree;\n    /**\r\n     *\r\n     */\n\n    function isProjecting() {\n      return projection.isEnabled && layoutState.isHydrated;\n    }\n    /**\r\n     *\r\n     */\n\n\n    function render() {\n      if (!instance) return;\n\n      if (isProjecting()) {\n        /**\r\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\r\n         * This is the final box that we will then project into by calculating a transform delta and\r\n         * applying it to the corrected box.\r\n         */\n        applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n        /**\r\n         * Update the delta between the corrected box and the final target box, after\r\n         * user-set transforms are applied to it. This will be used by the renderer to\r\n         * create a transform style that will reproject the element from its actual layout\r\n         * into the desired bounding box.\r\n         */\n\n        updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n      }\n\n      triggerBuild();\n      renderInstance(instance, renderState);\n    }\n\n    function triggerBuild() {\n      var valuesToRender = latestValues;\n\n      if (crossfader && crossfader.isActive()) {\n        var crossfadedValues = crossfader.getCrossfadeState(element);\n        if (crossfadedValues) valuesToRender = crossfadedValues;\n      }\n\n      build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n\n    function updateLayoutProjection() {\n      var delta = layoutState.delta,\n          treeScale = layoutState.treeScale;\n      var prevTreeScaleX = treeScale.x;\n      var prevTreeScaleY = treeScale.x;\n      var prevDeltaTransform = layoutState.deltaTransform;\n      updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n      hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta);\n      hasViewportBoxUpdated = false;\n      var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n\n      if (deltaTransform !== prevDeltaTransform || // Also compare calculated treeScale, for values that rely on this only for scale correction\n      prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {\n        element.scheduleRender();\n      }\n\n      layoutState.deltaTransform = deltaTransform;\n    }\n\n    function updateTreeLayoutProjection() {\n      element.layoutTree.forEach(fireUpdateLayoutProjection);\n    }\n    /**\r\n     *\r\n     */\n\n\n    function bindToMotionValue(key, value) {\n      var removeOnChange = value.onChange(function (latestValue) {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\r\n     * Any motion values that are provided to the element when created\r\n     * aren't yet bound to the element, as this would technically be impure.\r\n     * However, we iterate through the motion values and set them to the\r\n     * initial values for this component.\r\n     *\r\n     * TODO: This is impure and we should look at changing this to run on mount.\r\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\r\n     * more a reflection of the test.\r\n     */\n\n\n    var initialMotionValues = scrapeMotionValuesFromProps(props);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n    /**\r\n     * Determine what role this visual element should take in the variant tree.\r\n     */\n\n\n    var isControllingVariants = checkIfControllingVariants(props);\n    var isVariantNode = checkIfVariantNode(props);\n\n    var element = __assign(__assign({\n      treeType: treeType,\n\n      /**\r\n       * This is a mirror of the internal instance prop, which keeps\r\n       * VisualElement type-compatible with React's RefObject.\r\n       */\n      current: null,\n\n      /**\r\n       * The depth of this visual element within the visual element tree.\r\n       */\n      depth: parent ? parent.depth + 1 : 0,\n\n      /**\r\n       * An ancestor path back to the root visual element. This is used\r\n       * by layout projection to quickly recurse back up the tree.\r\n       */\n      path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [],\n      layoutTree: parent ? parent.layoutTree : new FlatTree(),\n\n      /**\r\n       *\r\n       */\n      presenceId: presenceId,\n      projection: projection,\n\n      /**\r\n       * If this component is part of the variant tree, it should track\r\n       * any children that are also part of the tree. This is essentially\r\n       * a shadow tree to simplify logic around how to stagger over children.\r\n       */\n      variantChildren: isVariantNode ? new Set() : undefined,\n\n      /**\r\n       * Whether this instance is visible. This can be changed imperatively\r\n       * by AnimateSharedLayout, is analogous to CSS's visibility in that\r\n       * hidden elements should take up layout, and needs enacting by the configured\r\n       * render function.\r\n       */\n      isVisible: undefined,\n\n      /**\r\n       * Normally, if a component is controlled by a parent's variants, it can\r\n       * rely on that ancestor to trigger animations further down the tree.\r\n       * However, if a component is created after its parent is mounted, the parent\r\n       * won't trigger that mount animation so the child needs to.\r\n       *\r\n       * TODO: This might be better replaced with a method isParentMounted\r\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\r\n       * This can be set by AnimatePresence to force components that mount\r\n       * at the same time as it to mount as if they have initial={false} set.\r\n       */\n      blockInitialAnimation: blockInitialAnimation,\n\n      /**\r\n       * A boolean that can be used to determine whether to respect hover events.\r\n       * For layout measurements we often have to reposition the instance by\r\n       * removing its transform. This can trigger hover events, which is\r\n       * undesired.\r\n       */\n      isHoverEventsEnabled: true,\n\n      /**\r\n       * Determine whether this component has mounted yet. This is mostly used\r\n       * by variant children to determine whether they need to trigger their\r\n       * own animations on mount.\r\n       */\n      isMounted: function () {\n        return Boolean(instance);\n      },\n      mount: function (newInstance) {\n        instance = element.current = newInstance;\n        element.pointTo(element);\n\n        if (isVariantNode && parent && !isControllingVariants) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n      },\n\n      /**\r\n       *\r\n       */\n      unmount: function () {\n        cancelSync.update(update);\n        cancelSync.render(render);\n        cancelSync.preRender(element.updateLayoutProjection);\n        valueSubscriptions.forEach(function (remove) {\n          return remove();\n        });\n        element.stopLayoutAnimation();\n        element.layoutTree.remove(element);\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n        lifecycles.clearAllListeners();\n      },\n\n      /**\r\n       * Add a child visual element to our set of children.\r\n       */\n      addVariantChild: function (child) {\n        var _a;\n\n        var closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return function () {\n            return closestVariantNode.variantChildren.delete(child);\n          };\n        }\n      },\n      sortNodePosition: function (other) {\n        /**\r\n         * If these nodes aren't even of the same type we can't compare their depth.\r\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\r\n       * Returns the closest variant node in the tree starting from\r\n       * this visual element.\r\n       */\n      getClosestVariantNode: function () {\n        return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n      },\n\n      /**\r\n       * A method that schedules an update to layout projections throughout\r\n       * the tree. We inherit from the parent so there's only ever one\r\n       * job scheduled on the next frame - that of the root visual element.\r\n       */\n      scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function () {\n        return sync.preRender(element.updateTreeLayoutProjection, false, true);\n      },\n\n      /**\r\n       * Expose the latest layoutId prop.\r\n       */\n      getLayoutId: function () {\n        return props.layoutId;\n      },\n\n      /**\r\n       * Returns the current instance.\r\n       */\n      getInstance: function () {\n        return instance;\n      },\n\n      /**\r\n       * Get/set the latest static values.\r\n       */\n      getStaticValue: function (key) {\n        return latestValues[key];\n      },\n      setStaticValue: function (key, value) {\n        return latestValues[key] = value;\n      },\n\n      /**\r\n       * Returns the latest motion value state. Currently only used to take\r\n       * a snapshot of the visual element - perhaps this can return the whole\r\n       * visual state\r\n       */\n      getLatestValues: function () {\n        return latestValues;\n      },\n\n      /**\r\n       * Set the visiblity of the visual element. If it's changed, schedule\r\n       * a render to reflect these changes.\r\n       */\n      setVisibility: function (visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\r\n       * Make a target animatable by Popmotion. For instance, if we're\r\n       * trying to animate width from 100px to 100vw we need to measure 100vw\r\n       * in pixels to determine what we really need to animate to. This is also\r\n       * pluggable to support Framer's custom value types like Color,\r\n       * and CSS variables.\r\n       */\n      makeTargetAnimatable: function (target, canMutate) {\n        if (canMutate === void 0) {\n          canMutate = true;\n        }\n\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\r\n       * Temporarily suspend hover events while we remove transforms in order to measure the layout.\r\n       *\r\n       * This seems like an odd bit of scheduling but what we're doing is saying after\r\n       * the next render, wait 10 milliseconds before reenabling hover events. Waiting until\r\n       * the next frame results in missed, valid hover events. But triggering on the postRender\r\n       * frame is too soon to avoid triggering events with layout measurements.\r\n       *\r\n       * Note: If we figure out a way of measuring layout while transforms remain applied, this can be removed.\r\n       */\n      suspendHoverEvents: function () {\n        element.isHoverEventsEnabled = false;\n        sync.postRender(function () {\n          return setTimeout(function () {\n            return element.isHoverEventsEnabled = true;\n          }, 10);\n        });\n      },\n      // Motion values ========================\n\n      /**\r\n       * Add a motion value and bind it to this visual element.\r\n       */\n      addValue: function (key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\r\n       * Remove a motion value and unbind any active subscriptions.\r\n       */\n      removeValue: function (key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\r\n       * Check whether we have a motion value for this key\r\n       */\n      hasValue: function (key) {\n        return values.has(key);\n      },\n\n      /**\r\n       * Get a motion value for this key. If called with a default\r\n       * value, we'll create one if none exists.\r\n       */\n      getValue: function (key, defaultValue) {\n        var value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\r\n       * Iterate over our motion values.\r\n       */\n      forEachValue: function (callback) {\n        return values.forEach(callback);\n      },\n\n      /**\r\n       * If we're trying to animate to a previously unencountered value,\r\n       * we need to check for it in our state and as a last resort read it\r\n       * directly from the instance (which might have performance implications).\r\n       */\n      readValue: function (key) {\n        var _a;\n\n        return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n      },\n\n      /**\r\n       * Set the base target to later animate back to. This is currently\r\n       * only hydrated on creation and when we first read a value.\r\n       */\n      setBaseTarget: function (key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\r\n       * Find the base target for a value thats been removed from all animation\r\n       * props.\r\n       */\n      getBaseTarget: function (key) {\n        if (getBaseTarget) {\n          var target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n\n        return baseTarget[key];\n      }\n    }, lifecycles), {\n      /**\r\n       * Build the renderer state based on the latest visual state.\r\n       */\n      build: function () {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\r\n       * Schedule a render on the next animation frame.\r\n       */\n      scheduleRender: function () {\n        sync.render(render, false, true);\n      },\n\n      /**\r\n       * Synchronously fire render. It's prefered that we batch renders but\r\n       * in many circumstances, like layout measurement, we need to run this\r\n       * synchronously. However in those instances other measures should be taken\r\n       * to batch reads/writes.\r\n       */\n      syncRender: render,\n\n      /**\r\n       * Update the provided props. Ensure any newly-added motion values are\r\n       * added to our map, old ones removed, and listeners updated.\r\n       */\n      setProps: function (newProps) {\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: function () {\n        return props;\n      },\n      // Variants ==============================\n\n      /**\r\n       * Returns the variant definition with a given name.\r\n       */\n      getVariant: function (name) {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\r\n       * Returns the defined default transition on this component.\r\n       */\n      getDefaultTransition: function () {\n        return props.transition;\n      },\n\n      /**\r\n       * Used by child variant nodes to get the closest ancestor variant props.\r\n       */\n      getVariantContext: function (startAtParent) {\n        if (startAtParent === void 0) {\n          startAtParent = false;\n        }\n\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants) {\n          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context_1.initial = props.initial;\n          }\n\n          return context_1;\n        }\n\n        var context = {};\n\n        for (var i = 0; i < numVariantProps; i++) {\n          var name_1 = variantProps[i];\n          var prop = props[name_1];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name_1] = prop;\n          }\n        }\n\n        return context;\n      },\n      // Layout projection ==============================\n\n      /**\r\n       * Enable layout projection for this visual element. Won't actually\r\n       * occur until we also have hydrated layout measurements.\r\n       */\n      enableLayoutProjection: function () {\n        projection.isEnabled = true;\n        element.layoutTree.add(element);\n      },\n\n      /**\r\n       * Lock the projection target, for instance when dragging, so\r\n       * nothing else can try and animate it.\r\n       */\n      lockProjectionTarget: function () {\n        projection.isTargetLocked = true;\n      },\n      unlockProjectionTarget: function () {\n        element.stopLayoutAnimation();\n        projection.isTargetLocked = false;\n      },\n\n      /**\r\n       * Record the viewport box as it was before an expected mutation/re-render\r\n       */\n      snapshotViewportBox: function () {\n        element.prevViewportBox = element.measureViewportBox(false);\n        /**\r\n         * Update targetBox to match the prevViewportBox. This is just to ensure\r\n         * that targetBox is affected by scroll in the same way as the measured box\r\n         */\n\n        element.rebaseProjectionTarget(false, element.prevViewportBox);\n      },\n      getLayoutState: function () {\n        return layoutState;\n      },\n      setCrossfader: function (newCrossfader) {\n        crossfader = newCrossfader;\n      },\n\n      /**\r\n       * Start a layout animation on a given axis.\r\n       * TODO: This could be better.\r\n       */\n      startLayoutAnimation: function (axis, transition) {\n        var progress = element.getProjectionAnimationProgress()[axis];\n        var _a = projection.target[axis],\n            min = _a.min,\n            max = _a.max;\n        var length = max - min;\n        progress.clearListeners();\n        progress.set(min);\n        progress.set(min); // Set twice to hard-reset velocity\n\n        progress.onChange(function (v) {\n          return element.setProjectionTargetAxis(axis, v, v + length);\n        });\n        return element.animateMotionValue(axis, progress, 0, transition);\n      },\n\n      /**\r\n       * Stop layout animations.\r\n       */\n      stopLayoutAnimation: function () {\n        eachAxis(function (axis) {\n          return element.getProjectionAnimationProgress()[axis].stop();\n        });\n      },\n\n      /**\r\n       * Measure the current viewport box with or without transforms.\r\n       * Only measures axis-aligned boxes, rotate and skew must be manually\r\n       * removed with a re-render to work.\r\n       */\n      measureViewportBox: function (withTransform) {\n        if (withTransform === void 0) {\n          withTransform = true;\n        }\n\n        var viewportBox = measureViewportBox(instance, options);\n        if (!withTransform) removeBoxTransforms(viewportBox, latestValues);\n        return viewportBox;\n      },\n\n      /**\r\n       * Update the layoutState by measuring the DOM layout. This\r\n       * should be called after resetting any layout-affecting transforms.\r\n       */\n      updateLayoutMeasurement: function () {\n        element.notifyBeforeLayoutMeasure(layoutState.layout);\n        layoutState.isHydrated = true;\n        layoutState.layout = element.measureViewportBox();\n        layoutState.layoutCorrected = copyAxisBox(layoutState.layout);\n        element.notifyLayoutMeasure(layoutState.layout, element.prevViewportBox || layoutState.layout);\n        sync.update(function () {\n          return element.rebaseProjectionTarget();\n        });\n      },\n\n      /**\r\n       * Get the motion values tracking the layout animations on each\r\n       * axis. Lazy init if not already created.\r\n       */\n      getProjectionAnimationProgress: function () {\n        projectionTargetProgress || (projectionTargetProgress = {\n          x: motionValue(0),\n          y: motionValue(0)\n        });\n        return projectionTargetProgress;\n      },\n\n      /**\r\n       * Update the projection of a single axis. Schedule an update to\r\n       * the tree layout projection.\r\n       */\n      setProjectionTargetAxis: function (axis, min, max, isRelative) {\n        if (isRelative === void 0) {\n          isRelative = false;\n        }\n\n        var target;\n\n        if (isRelative) {\n          if (!projection.relativeTarget) {\n            projection.relativeTarget = axisBox();\n          }\n\n          target = projection.relativeTarget[axis];\n        } else {\n          projection.relativeTarget = undefined;\n          target = projection.target[axis];\n        }\n\n        target.min = min;\n        target.max = max; // Flag that we want to fire the onViewportBoxUpdate event handler\n\n        hasViewportBoxUpdated = true;\n        lifecycles.notifySetAxisTarget();\n      },\n\n      /**\r\n       * Rebase the projection target on top of the provided viewport box\r\n       * or the measured layout. This ensures that non-animating elements\r\n       * don't fall out of sync differences in measurements vs projections\r\n       * after a page scroll or other relayout.\r\n       */\n      rebaseProjectionTarget: function (force, box) {\n        if (box === void 0) {\n          box = layoutState.layout;\n        }\n\n        var _a = element.getProjectionAnimationProgress(),\n            x = _a.x,\n            y = _a.y;\n\n        var shouldRebase = !projection.relativeTarget && !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();\n\n        if (force || shouldRebase) {\n          eachAxis(function (axis) {\n            var _a = box[axis],\n                min = _a.min,\n                max = _a.max;\n            element.setProjectionTargetAxis(axis, min, max);\n          });\n        }\n      },\n\n      /**\r\n       * Notify the visual element that its layout is up-to-date.\r\n       * Currently Animate.tsx uses this to check whether a layout animation\r\n       * needs to be performed.\r\n       */\n      notifyLayoutReady: function (config) {\n        element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n      },\n\n      /**\r\n       * Temporarily reset the transform of the instance.\r\n       */\n      resetTransform: function () {\n        return resetTransform(element, instance, props);\n      },\n\n      /**\r\n       * Perform the callback after temporarily unapplying the transform\r\n       * upwards through the tree.\r\n       */\n      withoutTransform: function (callback) {\n        var isEnabled = projection.isEnabled;\n        isEnabled && element.resetTransform();\n        parent ? parent.withoutTransform(callback) : callback();\n        isEnabled && restoreTransform(instance, renderState);\n      },\n      updateLayoutProjection: updateLayoutProjection,\n      updateTreeLayoutProjection: function () {\n        element.layoutTree.forEach(fireResolveRelativeTargetBox);\n        /**\r\n         * Schedule the projection updates at the end of the current preRender\r\n         * step. This will ensure that all layout trees will first resolve\r\n         * relative projection boxes into viewport boxes, and *then*\r\n         * update projections.\r\n         */\n\n        sync.preRender(updateTreeLayoutProjection, false, true);\n      },\n      getProjectionParent: function () {\n        if (projectionParent === undefined) {\n          var foundParent = false; // Search backwards through the tree path\n\n          for (var i = element.path.length - 1; i >= 0; i--) {\n            var ancestor = element.path[i];\n\n            if (ancestor.projection.isEnabled) {\n              foundParent = ancestor;\n              break;\n            }\n          }\n\n          projectionParent = foundParent;\n        }\n\n        return projectionParent;\n      },\n      resolveRelativeTargetBox: function () {\n        if (!projection.relativeTarget) return;\n        var relativeParent = element.getProjectionParent();\n\n        if (relativeParent) {\n          calcRelativeBox(projection, relativeParent.projection);\n        }\n      },\n\n      /**\r\n       *\r\n       */\n      pointTo: function (newLead) {\n        leadProjection = newLead.projection;\n        leadLatestValues = newLead.getLatestValues();\n        /**\r\n         * Subscribe to lead component's layout animations\r\n         */\n\n        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n        unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n          var _a;\n\n          if (element.isPresent) {\n            element.presence = Presence.Present;\n          } else {\n            (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n          }\n        }));\n      },\n      // TODO: Clean this up\n      isPresent: true,\n      presence: Presence.Entering\n    });\n\n    return element;\n  };\n};\n\nfunction fireResolveRelativeTargetBox(child) {\n  child.resolveRelativeTargetBox();\n}\n\nfunction fireUpdateLayoutProjection(child) {\n  child.updateLayoutProjection();\n}\n\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\n\nvar numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["__assign","__spreadArray","__read","sync","cancelSync","pipe","Presence","eachAxis","copyAxisBox","axisBox","removeBoxTransforms","applyBoxTransforms","calcRelativeBox","updateBoxDelta","motionValue","isMotionValue","buildLayoutProjectionTransform","variantPriorityOrder","createLifecycles","updateMotionValuesFromProps","updateLayoutDeltas","createLayoutState","createProjectionState","FlatTree","checkIfControllingVariants","checkIfVariantNode","isVariantLabel","visualElement","_a","_b","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","renderInstance","render","readValueFromInstance","resetTransform","restoreTransform","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","options","parent","props","presenceId","blockInitialAnimation","visualState","latestValues","renderState","instance","lifecycles","projection","projectionParent","leadProjection","leadLatestValues","unsubscribeFromLeadVisualElement","layoutState","crossfader","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","projectionTargetProgress","baseTarget","removeFromVariantTree","isProjecting","isEnabled","isHydrated","targetFinal","target","deltaFinal","layoutCorrected","triggerBuild","valuesToRender","isActive","crossfadedValues","getCrossfadeState","element","update","notifyUpdate","updateLayoutProjection","delta","treeScale","prevTreeScaleX","x","prevTreeScaleY","prevDeltaTransform","deltaTransform","path","notifyViewportBoxUpdate","y","scheduleRender","updateTreeLayoutProjection","layoutTree","forEach","fireUpdateLayoutProjection","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","set","initialMotionValues","undefined","isControllingVariants","isVariantNode","current","depth","variantChildren","Set","isVisible","manuallyAnimateOnMount","Boolean","isMounted","isHoverEventsEnabled","mount","newInstance","pointTo","addVariantChild","unmount","preRender","remove","stopLayoutAnimation","clearAllListeners","child","closestVariantNode","getClosestVariantNode","add","delete","other","getInstance","scheduleUpdateLayoutProjection","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","setVisibility","visibility","canMutate","suspendHoverEvents","postRender","setTimeout","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","setProps","newProps","updatePropListeners","getProps","getVariant","name","variants","getDefaultTransition","transition","getVariantContext","startAtParent","context_1","initial","context","i","numVariantProps","name_1","variantProps","prop","enableLayoutProjection","lockProjectionTarget","isTargetLocked","unlockProjectionTarget","snapshotViewportBox","prevViewportBox","rebaseProjectionTarget","getLayoutState","setCrossfader","newCrossfader","startLayoutAnimation","axis","progress","getProjectionAnimationProgress","min","max","length","clearListeners","v","setProjectionTargetAxis","animateMotionValue","stop","withTransform","viewportBox","updateLayoutMeasurement","notifyBeforeLayoutMeasure","layout","notifyLayoutMeasure","isRelative","relativeTarget","notifySetAxisTarget","force","box","shouldRebase","isAnimating","notifyLayoutReady","config","notifyLayoutUpdate","withoutTransform","fireResolveRelativeTargetBox","getProjectionParent","foundParent","ancestor","resolveRelativeTargetBox","relativeParent","newLead","onSetAxisTarget","onLayoutAnimationComplete","isPresent","presence","Present","layoutSafeToRemove","call","Entering"],"sources":["E:/Projects/project/project mangement dashbord/landing-pm-pange/node_modules/framer-motion/dist/es/render/index.js"],"sourcesContent":["import { __assign, __spreadArray, __read } from 'tslib';\r\nimport sync, { cancelSync } from 'framesync';\r\nimport { pipe } from 'popmotion';\r\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\r\nimport { eachAxis } from '../utils/each-axis.js';\r\nimport { copyAxisBox, axisBox } from '../utils/geometry/index.js';\r\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\r\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\r\nimport { motionValue } from '../value/index.js';\r\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\r\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\r\nimport { variantPriorityOrder } from './utils/animation-state.js';\r\nimport { createLifecycles } from './utils/lifecycles.js';\r\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\r\nimport { updateLayoutDeltas } from './utils/projection.js';\r\nimport { createLayoutState, createProjectionState } from './utils/state.js';\r\nimport { FlatTree } from './utils/flat-tree.js';\r\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\r\n\r\nvar visualElement = function (_a) {\r\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\r\n    return function (_a, options) {\r\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\r\n        if (options === void 0) { options = {}; }\r\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\r\n        /**\r\n         * The instance of the render-specific node that will be hydrated by the\r\n         * exposed React ref. So for example, this visual element can host a\r\n         * HTMLElement, plain object, or Three.js object. The functions provided\r\n         * in VisualElementConfig allow us to interface with this instance.\r\n         */\r\n        var instance;\r\n        /**\r\n         * Manages the subscriptions for a visual element's lifecycle, for instance\r\n         * onRender and onViewportBoxUpdate.\r\n         */\r\n        var lifecycles = createLifecycles();\r\n        /**\r\n         *\r\n         */\r\n        var projection = createProjectionState();\r\n        /**\r\n         * A reference to the nearest projecting parent. This is either\r\n         * undefined if we haven't looked for the nearest projecting parent,\r\n         * false if there is no parent performing layout projection, or a reference\r\n         * to the projecting parent.\r\n         */\r\n        var projectionParent;\r\n        /**\r\n         * This is a reference to the visual state of the \"lead\" visual element.\r\n         * Usually, this will be this visual element. But if it shares a layoutId\r\n         * with other visual elements, only one of them will be designated lead by\r\n         * AnimateSharedLayout. All the other visual elements will take on the visual\r\n         * appearance of the lead while they crossfade to it.\r\n         */\r\n        var leadProjection = projection;\r\n        var leadLatestValues = latestValues;\r\n        var unsubscribeFromLeadVisualElement;\r\n        /**\r\n         * The latest layout measurements and calculated projections. This\r\n         * is seperate from the target projection data in visualState as\r\n         * many visual elements might point to the same piece of visualState as\r\n         * a target, whereas they might each have different layouts and thus\r\n         * projection calculations needed to project into the same viewport box.\r\n         */\r\n        var layoutState = createLayoutState();\r\n        /**\r\n         *\r\n         */\r\n        var crossfader;\r\n        /**\r\n         * Keep track of whether the viewport box has been updated since the\r\n         * last time the layout projection was re-calculated.\r\n         */\r\n        var hasViewportBoxUpdated = false;\r\n        /**\r\n         * A map of all motion values attached to this visual element. Motion\r\n         * values are source of truth for any given animated value. A motion\r\n         * value might be provided externally by the component via props.\r\n         */\r\n        var values = new Map();\r\n        /**\r\n         * A map of every subscription that binds the provided or generated\r\n         * motion values onChange listeners to this visual element.\r\n         */\r\n        var valueSubscriptions = new Map();\r\n        /**\r\n         * A reference to the previously-provided motion values as returned\r\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\r\n         * if any motion values need to be removed after props are updated.\r\n         */\r\n        var prevMotionValues = {};\r\n        /**\r\n         * x/y motion values that track the progress of initiated layout\r\n         * animations.\r\n         *\r\n         * TODO: Target for removal\r\n         */\r\n        var projectionTargetProgress;\r\n        /**\r\n         * When values are removed from all animation props we need to search\r\n         * for a fallback value to animate to. These values are tracked in baseTarget.\r\n         */\r\n        var baseTarget = __assign({}, latestValues);\r\n        // Internal methods ========================\r\n        /**\r\n         * On mount, this will be hydrated with a callback to disconnect\r\n         * this visual element from its parent on unmount.\r\n         */\r\n        var removeFromVariantTree;\r\n        /**\r\n         *\r\n         */\r\n        function isProjecting() {\r\n            return projection.isEnabled && layoutState.isHydrated;\r\n        }\r\n        /**\r\n         *\r\n         */\r\n        function render() {\r\n            if (!instance)\r\n                return;\r\n            if (isProjecting()) {\r\n                /**\r\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\r\n                 * This is the final box that we will then project into by calculating a transform delta and\r\n                 * applying it to the corrected box.\r\n                 */\r\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\r\n                /**\r\n                 * Update the delta between the corrected box and the final target box, after\r\n                 * user-set transforms are applied to it. This will be used by the renderer to\r\n                 * create a transform style that will reproject the element from its actual layout\r\n                 * into the desired bounding box.\r\n                 */\r\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\r\n            }\r\n            triggerBuild();\r\n            renderInstance(instance, renderState);\r\n        }\r\n        function triggerBuild() {\r\n            var valuesToRender = latestValues;\r\n            if (crossfader && crossfader.isActive()) {\r\n                var crossfadedValues = crossfader.getCrossfadeState(element);\r\n                if (crossfadedValues)\r\n                    valuesToRender = crossfadedValues;\r\n            }\r\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\r\n        }\r\n        function update() {\r\n            lifecycles.notifyUpdate(latestValues);\r\n        }\r\n        function updateLayoutProjection() {\r\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\r\n            var prevTreeScaleX = treeScale.x;\r\n            var prevTreeScaleY = treeScale.x;\r\n            var prevDeltaTransform = layoutState.deltaTransform;\r\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\r\n            hasViewportBoxUpdated &&\r\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\r\n            hasViewportBoxUpdated = false;\r\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\r\n            if (deltaTransform !== prevDeltaTransform ||\r\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\r\n                prevTreeScaleX !== treeScale.x ||\r\n                prevTreeScaleY !== treeScale.y) {\r\n                element.scheduleRender();\r\n            }\r\n            layoutState.deltaTransform = deltaTransform;\r\n        }\r\n        function updateTreeLayoutProjection() {\r\n            element.layoutTree.forEach(fireUpdateLayoutProjection);\r\n        }\r\n        /**\r\n         *\r\n         */\r\n        function bindToMotionValue(key, value) {\r\n            var removeOnChange = value.onChange(function (latestValue) {\r\n                latestValues[key] = latestValue;\r\n                props.onUpdate && sync.update(update, false, true);\r\n            });\r\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\r\n            valueSubscriptions.set(key, function () {\r\n                removeOnChange();\r\n                removeOnRenderRequest();\r\n            });\r\n        }\r\n        /**\r\n         * Any motion values that are provided to the element when created\r\n         * aren't yet bound to the element, as this would technically be impure.\r\n         * However, we iterate through the motion values and set them to the\r\n         * initial values for this component.\r\n         *\r\n         * TODO: This is impure and we should look at changing this to run on mount.\r\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\r\n         * more a reflection of the test.\r\n         */\r\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\r\n        for (var key in initialMotionValues) {\r\n            var value = initialMotionValues[key];\r\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\r\n                value.set(latestValues[key], false);\r\n            }\r\n        }\r\n        /**\r\n         * Determine what role this visual element should take in the variant tree.\r\n         */\r\n        var isControllingVariants = checkIfControllingVariants(props);\r\n        var isVariantNode = checkIfVariantNode(props);\r\n        var element = __assign(__assign({ treeType: treeType, \r\n            /**\r\n             * This is a mirror of the internal instance prop, which keeps\r\n             * VisualElement type-compatible with React's RefObject.\r\n             */\r\n            current: null, \r\n            /**\r\n             * The depth of this visual element within the visual element tree.\r\n             */\r\n            depth: parent ? parent.depth + 1 : 0, \r\n            /**\r\n             * An ancestor path back to the root visual element. This is used\r\n             * by layout projection to quickly recurse back up the tree.\r\n             */\r\n            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), \r\n            /**\r\n             *\r\n             */\r\n            presenceId: presenceId,\r\n            projection: projection, \r\n            /**\r\n             * If this component is part of the variant tree, it should track\r\n             * any children that are also part of the tree. This is essentially\r\n             * a shadow tree to simplify logic around how to stagger over children.\r\n             */\r\n            variantChildren: isVariantNode ? new Set() : undefined, \r\n            /**\r\n             * Whether this instance is visible. This can be changed imperatively\r\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\r\n             * hidden elements should take up layout, and needs enacting by the configured\r\n             * render function.\r\n             */\r\n            isVisible: undefined, \r\n            /**\r\n             * Normally, if a component is controlled by a parent's variants, it can\r\n             * rely on that ancestor to trigger animations further down the tree.\r\n             * However, if a component is created after its parent is mounted, the parent\r\n             * won't trigger that mount animation so the child needs to.\r\n             *\r\n             * TODO: This might be better replaced with a method isParentMounted\r\n             */\r\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \r\n            /**\r\n             * This can be set by AnimatePresence to force components that mount\r\n             * at the same time as it to mount as if they have initial={false} set.\r\n             */\r\n            blockInitialAnimation: blockInitialAnimation, \r\n            /**\r\n             * A boolean that can be used to determine whether to respect hover events.\r\n             * For layout measurements we often have to reposition the instance by\r\n             * removing its transform. This can trigger hover events, which is\r\n             * undesired.\r\n             */\r\n            isHoverEventsEnabled: true, \r\n            /**\r\n             * Determine whether this component has mounted yet. This is mostly used\r\n             * by variant children to determine whether they need to trigger their\r\n             * own animations on mount.\r\n             */\r\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\r\n                instance = element.current = newInstance;\r\n                element.pointTo(element);\r\n                if (isVariantNode && parent && !isControllingVariants) {\r\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\r\n                }\r\n            },\r\n            /**\r\n             *\r\n             */\r\n            unmount: function () {\r\n                cancelSync.update(update);\r\n                cancelSync.render(render);\r\n                cancelSync.preRender(element.updateLayoutProjection);\r\n                valueSubscriptions.forEach(function (remove) { return remove(); });\r\n                element.stopLayoutAnimation();\r\n                element.layoutTree.remove(element);\r\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\r\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\r\n                lifecycles.clearAllListeners();\r\n            },\r\n            /**\r\n             * Add a child visual element to our set of children.\r\n             */\r\n            addVariantChild: function (child) {\r\n                var _a;\r\n                var closestVariantNode = element.getClosestVariantNode();\r\n                if (closestVariantNode) {\r\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\r\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\r\n                }\r\n            },\r\n            sortNodePosition: function (other) {\r\n                /**\r\n                 * If these nodes aren't even of the same type we can't compare their depth.\r\n                 */\r\n                if (!sortNodePosition || treeType !== other.treeType)\r\n                    return 0;\r\n                return sortNodePosition(element.getInstance(), other.getInstance());\r\n            }, \r\n            /**\r\n             * Returns the closest variant node in the tree starting from\r\n             * this visual element.\r\n             */\r\n            getClosestVariantNode: function () {\r\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\r\n            }, \r\n            /**\r\n             * A method that schedules an update to layout projections throughout\r\n             * the tree. We inherit from the parent so there's only ever one\r\n             * job scheduled on the next frame - that of the root visual element.\r\n             */\r\n            scheduleUpdateLayoutProjection: parent\r\n                ? parent.scheduleUpdateLayoutProjection\r\n                : function () {\r\n                    return sync.preRender(element.updateTreeLayoutProjection, false, true);\r\n                }, \r\n            /**\r\n             * Expose the latest layoutId prop.\r\n             */\r\n            getLayoutId: function () { return props.layoutId; }, \r\n            /**\r\n             * Returns the current instance.\r\n             */\r\n            getInstance: function () { return instance; }, \r\n            /**\r\n             * Get/set the latest static values.\r\n             */\r\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \r\n            /**\r\n             * Returns the latest motion value state. Currently only used to take\r\n             * a snapshot of the visual element - perhaps this can return the whole\r\n             * visual state\r\n             */\r\n            getLatestValues: function () { return latestValues; }, \r\n            /**\r\n             * Set the visiblity of the visual element. If it's changed, schedule\r\n             * a render to reflect these changes.\r\n             */\r\n            setVisibility: function (visibility) {\r\n                if (element.isVisible === visibility)\r\n                    return;\r\n                element.isVisible = visibility;\r\n                element.scheduleRender();\r\n            },\r\n            /**\r\n             * Make a target animatable by Popmotion. For instance, if we're\r\n             * trying to animate width from 100px to 100vw we need to measure 100vw\r\n             * in pixels to determine what we really need to animate to. This is also\r\n             * pluggable to support Framer's custom value types like Color,\r\n             * and CSS variables.\r\n             */\r\n            makeTargetAnimatable: function (target, canMutate) {\r\n                if (canMutate === void 0) { canMutate = true; }\r\n                return makeTargetAnimatable(element, target, props, canMutate);\r\n            },\r\n            /**\r\n             * Temporarily suspend hover events while we remove transforms in order to measure the layout.\r\n             *\r\n             * This seems like an odd bit of scheduling but what we're doing is saying after\r\n             * the next render, wait 10 milliseconds before reenabling hover events. Waiting until\r\n             * the next frame results in missed, valid hover events. But triggering on the postRender\r\n             * frame is too soon to avoid triggering events with layout measurements.\r\n             *\r\n             * Note: If we figure out a way of measuring layout while transforms remain applied, this can be removed.\r\n             */\r\n            suspendHoverEvents: function () {\r\n                element.isHoverEventsEnabled = false;\r\n                sync.postRender(function () {\r\n                    return setTimeout(function () { return (element.isHoverEventsEnabled = true); }, 10);\r\n                });\r\n            },\r\n            // Motion values ========================\r\n            /**\r\n             * Add a motion value and bind it to this visual element.\r\n             */\r\n            addValue: function (key, value) {\r\n                // Remove existing value if it exists\r\n                if (element.hasValue(key))\r\n                    element.removeValue(key);\r\n                values.set(key, value);\r\n                latestValues[key] = value.get();\r\n                bindToMotionValue(key, value);\r\n            },\r\n            /**\r\n             * Remove a motion value and unbind any active subscriptions.\r\n             */\r\n            removeValue: function (key) {\r\n                var _a;\r\n                values.delete(key);\r\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\r\n                valueSubscriptions.delete(key);\r\n                delete latestValues[key];\r\n                removeValueFromRenderState(key, renderState);\r\n            }, \r\n            /**\r\n             * Check whether we have a motion value for this key\r\n             */\r\n            hasValue: function (key) { return values.has(key); }, \r\n            /**\r\n             * Get a motion value for this key. If called with a default\r\n             * value, we'll create one if none exists.\r\n             */\r\n            getValue: function (key, defaultValue) {\r\n                var value = values.get(key);\r\n                if (value === undefined && defaultValue !== undefined) {\r\n                    value = motionValue(defaultValue);\r\n                    element.addValue(key, value);\r\n                }\r\n                return value;\r\n            }, \r\n            /**\r\n             * Iterate over our motion values.\r\n             */\r\n            forEachValue: function (callback) { return values.forEach(callback); }, \r\n            /**\r\n             * If we're trying to animate to a previously unencountered value,\r\n             * we need to check for it in our state and as a last resort read it\r\n             * directly from the instance (which might have performance implications).\r\n             */\r\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \r\n            /**\r\n             * Set the base target to later animate back to. This is currently\r\n             * only hydrated on creation and when we first read a value.\r\n             */\r\n            setBaseTarget: function (key, value) {\r\n                baseTarget[key] = value;\r\n            },\r\n            /**\r\n             * Find the base target for a value thats been removed from all animation\r\n             * props.\r\n             */\r\n            getBaseTarget: function (key) {\r\n                if (getBaseTarget) {\r\n                    var target = getBaseTarget(props, key);\r\n                    if (target !== undefined && !isMotionValue(target))\r\n                        return target;\r\n                }\r\n                return baseTarget[key];\r\n            } }, lifecycles), { \r\n            /**\r\n             * Build the renderer state based on the latest visual state.\r\n             */\r\n            build: function () {\r\n                triggerBuild();\r\n                return renderState;\r\n            },\r\n            /**\r\n             * Schedule a render on the next animation frame.\r\n             */\r\n            scheduleRender: function () {\r\n                sync.render(render, false, true);\r\n            }, \r\n            /**\r\n             * Synchronously fire render. It's prefered that we batch renders but\r\n             * in many circumstances, like layout measurement, we need to run this\r\n             * synchronously. However in those instances other measures should be taken\r\n             * to batch reads/writes.\r\n             */\r\n            syncRender: render, \r\n            /**\r\n             * Update the provided props. Ensure any newly-added motion values are\r\n             * added to our map, old ones removed, and listeners updated.\r\n             */\r\n            setProps: function (newProps) {\r\n                props = newProps;\r\n                lifecycles.updatePropListeners(newProps);\r\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\r\n            }, getProps: function () { return props; }, \r\n            // Variants ==============================\r\n            /**\r\n             * Returns the variant definition with a given name.\r\n             */\r\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \r\n            /**\r\n             * Returns the defined default transition on this component.\r\n             */\r\n            getDefaultTransition: function () { return props.transition; }, \r\n            /**\r\n             * Used by child variant nodes to get the closest ancestor variant props.\r\n             */\r\n            getVariantContext: function (startAtParent) {\r\n                if (startAtParent === void 0) { startAtParent = false; }\r\n                if (startAtParent)\r\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\r\n                if (!isControllingVariants) {\r\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\r\n                    if (props.initial !== undefined) {\r\n                        context_1.initial = props.initial;\r\n                    }\r\n                    return context_1;\r\n                }\r\n                var context = {};\r\n                for (var i = 0; i < numVariantProps; i++) {\r\n                    var name_1 = variantProps[i];\r\n                    var prop = props[name_1];\r\n                    if (isVariantLabel(prop) || prop === false) {\r\n                        context[name_1] = prop;\r\n                    }\r\n                }\r\n                return context;\r\n            },\r\n            // Layout projection ==============================\r\n            /**\r\n             * Enable layout projection for this visual element. Won't actually\r\n             * occur until we also have hydrated layout measurements.\r\n             */\r\n            enableLayoutProjection: function () {\r\n                projection.isEnabled = true;\r\n                element.layoutTree.add(element);\r\n            },\r\n            /**\r\n             * Lock the projection target, for instance when dragging, so\r\n             * nothing else can try and animate it.\r\n             */\r\n            lockProjectionTarget: function () {\r\n                projection.isTargetLocked = true;\r\n            },\r\n            unlockProjectionTarget: function () {\r\n                element.stopLayoutAnimation();\r\n                projection.isTargetLocked = false;\r\n            },\r\n            /**\r\n             * Record the viewport box as it was before an expected mutation/re-render\r\n             */\r\n            snapshotViewportBox: function () {\r\n                element.prevViewportBox = element.measureViewportBox(false);\r\n                /**\r\n                 * Update targetBox to match the prevViewportBox. This is just to ensure\r\n                 * that targetBox is affected by scroll in the same way as the measured box\r\n                 */\r\n                element.rebaseProjectionTarget(false, element.prevViewportBox);\r\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\r\n                crossfader = newCrossfader;\r\n            },\r\n            /**\r\n             * Start a layout animation on a given axis.\r\n             * TODO: This could be better.\r\n             */\r\n            startLayoutAnimation: function (axis, transition) {\r\n                var progress = element.getProjectionAnimationProgress()[axis];\r\n                var _a = projection.target[axis], min = _a.min, max = _a.max;\r\n                var length = max - min;\r\n                progress.clearListeners();\r\n                progress.set(min);\r\n                progress.set(min); // Set twice to hard-reset velocity\r\n                progress.onChange(function (v) {\r\n                    return element.setProjectionTargetAxis(axis, v, v + length);\r\n                });\r\n                return element.animateMotionValue(axis, progress, 0, transition);\r\n            },\r\n            /**\r\n             * Stop layout animations.\r\n             */\r\n            stopLayoutAnimation: function () {\r\n                eachAxis(function (axis) {\r\n                    return element.getProjectionAnimationProgress()[axis].stop();\r\n                });\r\n            },\r\n            /**\r\n             * Measure the current viewport box with or without transforms.\r\n             * Only measures axis-aligned boxes, rotate and skew must be manually\r\n             * removed with a re-render to work.\r\n             */\r\n            measureViewportBox: function (withTransform) {\r\n                if (withTransform === void 0) { withTransform = true; }\r\n                var viewportBox = measureViewportBox(instance, options);\r\n                if (!withTransform)\r\n                    removeBoxTransforms(viewportBox, latestValues);\r\n                return viewportBox;\r\n            },\r\n            /**\r\n             * Update the layoutState by measuring the DOM layout. This\r\n             * should be called after resetting any layout-affecting transforms.\r\n             */\r\n            updateLayoutMeasurement: function () {\r\n                element.notifyBeforeLayoutMeasure(layoutState.layout);\r\n                layoutState.isHydrated = true;\r\n                layoutState.layout = element.measureViewportBox();\r\n                layoutState.layoutCorrected = copyAxisBox(layoutState.layout);\r\n                element.notifyLayoutMeasure(layoutState.layout, element.prevViewportBox || layoutState.layout);\r\n                sync.update(function () { return element.rebaseProjectionTarget(); });\r\n            },\r\n            /**\r\n             * Get the motion values tracking the layout animations on each\r\n             * axis. Lazy init if not already created.\r\n             */\r\n            getProjectionAnimationProgress: function () {\r\n                projectionTargetProgress || (projectionTargetProgress = {\r\n                    x: motionValue(0),\r\n                    y: motionValue(0),\r\n                });\r\n                return projectionTargetProgress;\r\n            },\r\n            /**\r\n             * Update the projection of a single axis. Schedule an update to\r\n             * the tree layout projection.\r\n             */\r\n            setProjectionTargetAxis: function (axis, min, max, isRelative) {\r\n                if (isRelative === void 0) { isRelative = false; }\r\n                var target;\r\n                if (isRelative) {\r\n                    if (!projection.relativeTarget) {\r\n                        projection.relativeTarget = axisBox();\r\n                    }\r\n                    target = projection.relativeTarget[axis];\r\n                }\r\n                else {\r\n                    projection.relativeTarget = undefined;\r\n                    target = projection.target[axis];\r\n                }\r\n                target.min = min;\r\n                target.max = max;\r\n                // Flag that we want to fire the onViewportBoxUpdate event handler\r\n                hasViewportBoxUpdated = true;\r\n                lifecycles.notifySetAxisTarget();\r\n            },\r\n            /**\r\n             * Rebase the projection target on top of the provided viewport box\r\n             * or the measured layout. This ensures that non-animating elements\r\n             * don't fall out of sync differences in measurements vs projections\r\n             * after a page scroll or other relayout.\r\n             */\r\n            rebaseProjectionTarget: function (force, box) {\r\n                if (box === void 0) { box = layoutState.layout; }\r\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\r\n                var shouldRebase = !projection.relativeTarget &&\r\n                    !projection.isTargetLocked &&\r\n                    !x.isAnimating() &&\r\n                    !y.isAnimating();\r\n                if (force || shouldRebase) {\r\n                    eachAxis(function (axis) {\r\n                        var _a = box[axis], min = _a.min, max = _a.max;\r\n                        element.setProjectionTargetAxis(axis, min, max);\r\n                    });\r\n                }\r\n            },\r\n            /**\r\n             * Notify the visual element that its layout is up-to-date.\r\n             * Currently Animate.tsx uses this to check whether a layout animation\r\n             * needs to be performed.\r\n             */\r\n            notifyLayoutReady: function (config) {\r\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\r\n            }, \r\n            /**\r\n             * Temporarily reset the transform of the instance.\r\n             */\r\n            resetTransform: function () { return resetTransform(element, instance, props); }, \r\n            /**\r\n             * Perform the callback after temporarily unapplying the transform\r\n             * upwards through the tree.\r\n             */\r\n            withoutTransform: function (callback) {\r\n                var isEnabled = projection.isEnabled;\r\n                isEnabled && element.resetTransform();\r\n                parent ? parent.withoutTransform(callback) : callback();\r\n                isEnabled && restoreTransform(instance, renderState);\r\n            },\r\n            updateLayoutProjection: updateLayoutProjection,\r\n            updateTreeLayoutProjection: function () {\r\n                element.layoutTree.forEach(fireResolveRelativeTargetBox);\r\n                /**\r\n                 * Schedule the projection updates at the end of the current preRender\r\n                 * step. This will ensure that all layout trees will first resolve\r\n                 * relative projection boxes into viewport boxes, and *then*\r\n                 * update projections.\r\n                 */\r\n                sync.preRender(updateTreeLayoutProjection, false, true);\r\n            },\r\n            getProjectionParent: function () {\r\n                if (projectionParent === undefined) {\r\n                    var foundParent = false;\r\n                    // Search backwards through the tree path\r\n                    for (var i = element.path.length - 1; i >= 0; i--) {\r\n                        var ancestor = element.path[i];\r\n                        if (ancestor.projection.isEnabled) {\r\n                            foundParent = ancestor;\r\n                            break;\r\n                        }\r\n                    }\r\n                    projectionParent = foundParent;\r\n                }\r\n                return projectionParent;\r\n            },\r\n            resolveRelativeTargetBox: function () {\r\n                if (!projection.relativeTarget)\r\n                    return;\r\n                var relativeParent = element.getProjectionParent();\r\n                if (relativeParent) {\r\n                    calcRelativeBox(projection, relativeParent.projection);\r\n                }\r\n            },\r\n            /**\r\n             *\r\n             */\r\n            pointTo: function (newLead) {\r\n                leadProjection = newLead.projection;\r\n                leadLatestValues = newLead.getLatestValues();\r\n                /**\r\n                 * Subscribe to lead component's layout animations\r\n                 */\r\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\r\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\r\n                    var _a;\r\n                    if (element.isPresent) {\r\n                        element.presence = Presence.Present;\r\n                    }\r\n                    else {\r\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\r\n                    }\r\n                }));\r\n            }, \r\n            // TODO: Clean this up\r\n            isPresent: true, presence: Presence.Entering });\r\n        return element;\r\n    };\r\n};\r\nfunction fireResolveRelativeTargetBox(child) {\r\n    child.resolveRelativeTargetBox();\r\n}\r\nfunction fireUpdateLayoutProjection(child) {\r\n    child.updateLayoutProjection();\r\n}\r\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\r\nvar numVariantProps = variantProps.length;\r\n\r\nexport { visualElement };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}